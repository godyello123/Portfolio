USE [gameDB_individual]
GO
/****** Object:  Table [dbo].[tb_character]    Script Date: 2024-09-08 오전 12:06:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tb_character](
	[uid] [bigint] NOT NULL,
	[device_id] [nvarchar](128) NOT NULL,
	[name] [nvarchar](64) NOT NULL,
	[event_stage] [int] NOT NULL,
	[level] [int] NOT NULL,
	[exp] [bigint] NOT NULL,
	[level_point] [int] NOT NULL,
	[ad_skip] [bit] NOT NULL,
	[profile_id] [int] NOT NULL,
	[login_time] [bigint] NOT NULL,
	[logout_time] [bigint] NOT NULL,
	[dw_update_time] [datetime] NOT NULL,
 CONSTRAINT [PK_tb_character_info] PRIMARY KEY CLUSTERED 
(
	[uid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tb_character_ads_buff]    Script Date: 2024-09-08 오전 12:06:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tb_character_ads_buff](
	[uid] [bigint] NOT NULL,
	[buff_id] [int] NOT NULL,
	[buff_lv] [int] NOT NULL,
	[buff_exp] [int] NOT NULL,
	[buff_exp_time] [bigint] NOT NULL,
	[watch_exp_time] [bigint] NOT NULL,
	[watch_count] [int] NOT NULL,
	[dw_update_time] [datetime2](0) NOT NULL,
 CONSTRAINT [PK_tb_character_ads_buff] PRIMARY KEY CLUSTERED 
(
	[uid] ASC,
	[buff_id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tb_character_coin]    Script Date: 2024-09-08 오전 12:06:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tb_character_coin](
	[uid] [bigint] NOT NULL,
	[type] [nvarchar](32) NOT NULL,
	[value] [bigint] NOT NULL,
	[dw_update_time] [datetime] NOT NULL,
 CONSTRAINT [PK_tb_character_coin] PRIMARY KEY CLUSTERED 
(
	[uid] DESC,
	[type] DESC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tb_character_coupon]    Script Date: 2024-09-08 오전 12:06:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tb_character_coupon](
	[uid] [bigint] NOT NULL,
	[coupon_json] [nvarchar](max) NOT NULL,
	[dw_update_time] [datetime2](0) NOT NULL,
 CONSTRAINT [pk_tb_character_coupon] PRIMARY KEY CLUSTERED 
(
	[uid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tb_character_equip_preset]    Script Date: 2024-09-08 오전 12:06:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tb_character_equip_preset](
	[uid] [bigint] NOT NULL,
	[idx] [int] NOT NULL,
	[equip_slot] [nvarchar](256) NOT NULL,
	[is_enable] [bit] NOT NULL,
	[dw_update_time] [datetime] NOT NULL,
 CONSTRAINT [PK_tb_character_equip_preset] PRIMARY KEY CLUSTERED 
(
	[uid] ASC,
	[idx] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tb_character_event]    Script Date: 2024-09-08 오전 12:06:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tb_character_event](
	[uid] [bigint] NOT NULL,
	[event_uid] [bigint] NOT NULL,
	[event_id] [int] NOT NULL,
	[start_date] [bigint] NOT NULL,
	[end_date] [bigint] NOT NULL,
	[dw_update_time] [datetime2](0) NOT NULL,
 CONSTRAINT [pk_tb_character_event] PRIMARY KEY CLUSTERED 
(
	[uid] ASC,
	[event_uid] ASC,
	[event_id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tb_character_event_roulette]    Script Date: 2024-09-08 오전 12:06:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tb_character_event_roulette](
	[uid] [bigint] NOT NULL,
	[event_uid] [bigint] NOT NULL,
	[exclude_list] [varchar](128) NOT NULL,
	[dw_update_time] [datetime2](0) NOT NULL,
 CONSTRAINT [pk_tb_character_event_roulette] PRIMARY KEY CLUSTERED 
(
	[uid] ASC,
	[event_uid] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tb_character_event_shop]    Script Date: 2024-09-08 오전 12:06:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tb_character_event_shop](
	[uid] [bigint] NOT NULL,
	[event_uid] [bigint] NOT NULL,
	[shop_id] [int] NOT NULL,
	[limit_count] [int] NOT NULL,
	[dw_update_time] [datetime2](0) NOT NULL,
 CONSTRAINT [pk_tb_character_event_shop] PRIMARY KEY CLUSTERED 
(
	[uid] ASC,
	[event_uid] ASC,
	[shop_id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tb_character_gacha]    Script Date: 2024-09-08 오전 12:06:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tb_character_gacha](
	[uid] [bigint] NOT NULL,
	[id] [int] NOT NULL,
	[lv] [int] NOT NULL,
	[exp] [bigint] NOT NULL,
	[rewarded] [int] NOT NULL,
	[dw_update_time] [datetime] NOT NULL,
 CONSTRAINT [PK_tb_character_gacha] PRIMARY KEY CLUSTERED 
(
	[uid] DESC,
	[id] DESC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tb_character_growth_gold]    Script Date: 2024-09-08 오전 12:06:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tb_character_growth_gold](
	[uid] [bigint] NOT NULL,
	[id] [int] NOT NULL,
	[value] [int] NOT NULL,
	[dw_update_time] [datetime] NOT NULL,
 CONSTRAINT [PK_tb_character_growth_gold] PRIMARY KEY CLUSTERED 
(
	[uid] ASC,
	[id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tb_character_growth_level]    Script Date: 2024-09-08 오전 12:06:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tb_character_growth_level](
	[uid] [bigint] NOT NULL,
	[id] [int] NOT NULL,
	[value] [int] NOT NULL,
	[dw_update_time] [datetime] NOT NULL,
 CONSTRAINT [PK_tb_character_growth_level] PRIMARY KEY CLUSTERED 
(
	[uid] ASC,
	[id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tb_character_item]    Script Date: 2024-09-08 오전 12:06:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tb_character_item](
	[uid] [bigint] NOT NULL,
	[item_id] [bigint] NOT NULL,
	[table_id] [nvarchar](64) NOT NULL,
	[level] [int] NOT NULL,
	[count] [bigint] NOT NULL,
	[in_used] [bit] NOT NULL,
	[random_option] [varchar](1024) NOT NULL,
	[dw_update_time] [datetime] NOT NULL,
 CONSTRAINT [PK_tb_character_item] PRIMARY KEY CLUSTERED 
(
	[uid] DESC,
	[item_id] DESC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tb_character_knight_preset]    Script Date: 2024-09-08 오전 12:06:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tb_character_knight_preset](
	[uid] [bigint] NOT NULL,
	[idx] [int] NOT NULL,
	[equip_slot] [nvarchar](256) NOT NULL,
	[is_enable] [bit] NOT NULL,
	[dw_update_time] [datetime] NOT NULL,
 CONSTRAINT [PK_tb_character_knight_preset] PRIMARY KEY CLUSTERED 
(
	[uid] ASC,
	[idx] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tb_character_mission]    Script Date: 2024-09-08 오전 12:06:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tb_character_mission](
	[uid] [bigint] NOT NULL,
	[id] [int] NOT NULL,
	[idx] [int] NOT NULL,
	[val] [bigint] NOT NULL,
	[state] [tinyint] NOT NULL,
	[pass_rewarded] [bit] NOT NULL,
	[dw_update_time] [datetime] NOT NULL,
 CONSTRAINT [PK_tb_character_mission] PRIMARY KEY CLUSTERED 
(
	[uid] DESC,
	[id] DESC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tb_character_post]    Script Date: 2024-09-08 오전 12:06:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tb_character_post](
	[uid] [bigint] NOT NULL,
	[id] [bigint] NOT NULL,
	[type] [tinyint] NOT NULL,
	[title] [nvarchar](64) NOT NULL,
	[msg] [nvarchar](64) NOT NULL,
	[is_read] [bit] NOT NULL,
	[is_reward] [bit] NOT NULL,
	[begin_time] [bigint] NOT NULL,
	[expire_time] [bigint] NOT NULL,
	[reward] [varchar](512) NOT NULL,
	[dw_update_time] [datetime] NOT NULL,
 CONSTRAINT [PK_tb_character_post] PRIMARY KEY CLUSTERED 
(
	[uid] DESC,
	[id] DESC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tb_character_pref]    Script Date: 2024-09-08 오전 12:06:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tb_character_pref](
	[uid] [bigint] NOT NULL,
	[type] [tinyint] NOT NULL,
	[strVal] [nvarchar](1024) NOT NULL,
	[dw_update_time] [datetime] NOT NULL,
 CONSTRAINT [PK_tb_character_pref] PRIMARY KEY CLUSTERED 
(
	[uid] DESC,
	[type] DESC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tb_character_quest_checkin]    Script Date: 2024-09-08 오전 12:06:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tb_character_quest_checkin](
	[uid] [bigint] NOT NULL,
	[quest_id] [varchar](32) NOT NULL,
	[id] [int] NOT NULL,
	[idx] [int] NOT NULL,
	[val] [bigint] NOT NULL,
	[state] [tinyint] NOT NULL,
	[exp_time] [datetime2](0) NOT NULL,
	[dw_update_time] [datetime2](0) NOT NULL,
 CONSTRAINT [PK_tb_character_quest_checkin] PRIMARY KEY CLUSTERED 
(
	[uid] DESC,
	[quest_id] ASC,
	[id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tb_character_quest_daily]    Script Date: 2024-09-08 오전 12:06:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tb_character_quest_daily](
	[uid] [bigint] NOT NULL,
	[id] [int] NOT NULL,
	[idx] [int] NOT NULL,
	[val] [bigint] NOT NULL,
	[state] [tinyint] NOT NULL,
	[exp_time] [datetime2](0) NOT NULL,
	[dw_update_time] [datetime2](0) NOT NULL,
 CONSTRAINT [PK_tb_character_quest_daily] PRIMARY KEY CLUSTERED 
(
	[uid] DESC,
	[id] DESC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tb_character_quest_event]    Script Date: 2024-09-08 오전 12:06:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tb_character_quest_event](
	[uid] [bigint] NOT NULL,
	[id] [int] NOT NULL,
	[quest_id] [nvarchar](128) NOT NULL,
	[idx] [int] NOT NULL,
	[val] [bigint] NOT NULL,
	[state] [tinyint] NOT NULL,
	[exp_time] [datetime2](0) NOT NULL,
	[dw_update_time] [datetime2](0) NOT NULL,
 CONSTRAINT [PK_tb_character_quest_event] PRIMARY KEY CLUSTERED 
(
	[uid] DESC,
	[quest_id] ASC,
	[id] DESC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tb_character_quest_main]    Script Date: 2024-09-08 오전 12:06:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tb_character_quest_main](
	[uid] [bigint] NOT NULL,
	[id] [int] NOT NULL,
	[idx] [int] NOT NULL,
	[val] [bigint] NOT NULL,
	[state] [tinyint] NOT NULL,
	[dw_update_time] [datetime] NOT NULL,
 CONSTRAINT [PK_tb_character_quest_main] PRIMARY KEY CLUSTERED 
(
	[uid] DESC,
	[id] DESC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tb_character_quest_pass]    Script Date: 2024-09-08 오전 12:06:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tb_character_quest_pass](
	[uid] [bigint] NOT NULL,
	[quest_id] [varchar](32) NOT NULL,
	[id] [int] NOT NULL,
	[idx] [int] NOT NULL,
	[val] [bigint] NOT NULL,
	[state] [tinyint] NOT NULL,
	[pass_rewarded] [bit] NOT NULL,
	[pass_active] [bit] NOT NULL,
	[dw_update_time] [datetime2](0) NOT NULL,
 CONSTRAINT [PK_tb_character_quest_pass] PRIMARY KEY CLUSTERED 
(
	[uid] DESC,
	[quest_id] ASC,
	[id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tb_character_quest_repeat]    Script Date: 2024-09-08 오전 12:06:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tb_character_quest_repeat](
	[uid] [bigint] NOT NULL,
	[id] [int] NOT NULL,
	[idx] [int] NOT NULL,
	[val] [bigint] NOT NULL,
	[state] [tinyint] NOT NULL,
	[pass_rewarded] [bit] NOT NULL,
	[dw_update_time] [datetime] NOT NULL,
 CONSTRAINT [PK_tb_character_quest_repeat] PRIMARY KEY CLUSTERED 
(
	[uid] DESC,
	[id] DESC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tb_character_rank_reward]    Script Date: 2024-09-08 오전 12:06:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tb_character_rank_reward](
	[uid] [bigint] NOT NULL,
	[type] [tinyint] NOT NULL,
	[state] [tinyint] NOT NULL,
	[val] [int] NOT NULL,
	[exp_time] [bigint] NOT NULL,
	[dw_update_time] [datetime] NOT NULL,
 CONSTRAINT [PK_tb_character_rank_reward] PRIMARY KEY CLUSTERED 
(
	[uid] DESC,
	[type] DESC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tb_character_relic]    Script Date: 2024-09-08 오전 12:06:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tb_character_relic](
	[uid] [bigint] NOT NULL,
	[group_id] [int] NOT NULL,
	[lv] [int] NOT NULL,
	[bonus_prob] [int] NOT NULL,
	[dw_update_time] [datetime] NOT NULL,
 CONSTRAINT [PK_tb_character_relic] PRIMARY KEY CLUSTERED 
(
	[uid] DESC,
	[group_id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tb_character_shop]    Script Date: 2024-09-08 오전 12:06:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tb_character_shop](
	[uid] [bigint] NOT NULL,
	[shop_id] [int] NOT NULL,
	[limit_count] [int] NOT NULL,
	[reset_time] [bigint] NOT NULL,
	[dw_period_reward_time] [bigint] NOT NULL,
	[dw_update_time] [datetime2](0) NOT NULL,
 CONSTRAINT [pk_tb_character_shop] PRIMARY KEY CLUSTERED 
(
	[uid] ASC,
	[shop_id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tb_character_shop_iap_receipt]    Script Date: 2024-09-08 오전 12:06:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tb_character_shop_iap_receipt](
	[uid] [bigint] NOT NULL,
	[transaction_id] [varchar](64) NOT NULL,
	[store_type] [tinyint] NOT NULL,
	[product_id] [varchar](32) NOT NULL,
	[mail_guid] [bigint] NOT NULL,
	[dw_update_time] [datetime2](0) NOT NULL,
 CONSTRAINT [pk_tb_character_shop_iap_receipt] PRIMARY KEY CLUSTERED 
(
	[uid] ASC,
	[transaction_id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tb_character_skill]    Script Date: 2024-09-08 오전 12:06:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tb_character_skill](
	[uid] [bigint] NOT NULL,
	[group_id] [int] NOT NULL,
	[tid] [int] NOT NULL,
	[level] [int] NOT NULL,
	[is_learend] [bit] NOT NULL,
	[dw_update_time] [datetime] NOT NULL,
 CONSTRAINT [PK_tb_character_skill] PRIMARY KEY CLUSTERED 
(
	[uid] DESC,
	[group_id] DESC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tb_character_skill_preset]    Script Date: 2024-09-08 오전 12:06:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tb_character_skill_preset](
	[uid] [bigint] NOT NULL,
	[idx] [int] NOT NULL,
	[equip_slot] [nvarchar](256) NOT NULL,
	[is_enable] [bit] NOT NULL,
	[dw_update_time] [datetime] NOT NULL,
 CONSTRAINT [PK_tb_character_skill_preset] PRIMARY KEY CLUSTERED 
(
	[uid] ASC,
	[idx] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tb_character_stage]    Script Date: 2024-09-08 오전 12:06:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tb_character_stage](
	[uid] [bigint] NOT NULL,
	[type] [tinyint] NOT NULL,
	[cur_tid] [int] NOT NULL,
	[max_tid] [int] NOT NULL,
	[total_cnt] [bigint] NOT NULL,
	[is_loop] [bit] NOT NULL,
	[dw_update_time] [datetime] NOT NULL,
 CONSTRAINT [PK_tb_character_stage] PRIMARY KEY CLUSTERED 
(
	[uid] DESC,
	[type] DESC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tb_character_stage_skill]    Script Date: 2024-09-08 오전 12:06:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tb_character_stage_skill](
	[uid] [bigint] NOT NULL,
	[type] [int] NOT NULL,
	[equip_slot] [nvarchar](256) NOT NULL,
	[dw_update_time] [datetime] NOT NULL,
 CONSTRAINT [PK_tb_character_stage_skill] PRIMARY KEY CLUSTERED 
(
	[uid] ASC,
	[type] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tb_sys_error_log]    Script Date: 2024-09-08 오전 12:06:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tb_sys_error_log](
	[seq_no] [bigint] IDENTITY(1,1) NOT NULL,
	[user_name] [sysname] NOT NULL,
	[error_no] [int] NOT NULL,
	[error_serverity] [int] NULL,
	[error_state] [int] NULL,
	[error_proc] [nvarchar](126) NULL,
	[error_line] [int] NULL,
	[error_msg] [nvarchar](4000) NOT NULL,
	[ipt_time] [datetime] NULL,
	[dw_update_time] [datetime] NOT NULL,
 CONSTRAINT [PK_tb_sys_error_log] PRIMARY KEY CLUSTERED 
(
	[seq_no] DESC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tb_system_coupon]    Script Date: 2024-09-08 오전 12:06:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tb_system_coupon](
	[coupon_id] [nvarchar](64) NOT NULL,
	[cnt] [int] NOT NULL,
	[use_level] [int] NOT NULL,
	[begin_time] [bigint] NOT NULL,
	[expire_time] [bigint] NOT NULL,
	[reward] [varchar](512) NOT NULL,
	[dw_update_time] [datetime] NOT NULL,
 CONSTRAINT [PK_tb_system_coupon] PRIMARY KEY CLUSTERED 
(
	[coupon_id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tb_system_event]    Script Date: 2024-09-08 오전 12:06:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tb_system_event](
	[uid] [bigint] NOT NULL,
	[event_id] [int] NOT NULL,
	[start_date] [bigint] NOT NULL,
	[end_date] [bigint] NOT NULL,
	[dw_update_time] [datetime2](0) NOT NULL,
 CONSTRAINT [PK_tb_system_event] PRIMARY KEY CLUSTERED 
(
	[uid] DESC,
	[event_id] DESC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tb_system_post]    Script Date: 2024-09-08 오전 12:06:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tb_system_post](
	[id] [bigint] IDENTITY(1,1) NOT NULL,
	[type] [tinyint] NOT NULL,
	[title] [nvarchar](64) NOT NULL,
	[msg] [nvarchar](64) NOT NULL,
	[begin_time] [bigint] NOT NULL,
	[expire_time] [bigint] NOT NULL,
	[reward] [varchar](512) NOT NULL,
	[dw_update_time] [datetime] NOT NULL,
 CONSTRAINT [PK_tb_system_post] PRIMARY KEY CLUSTERED 
(
	[id] DESC,
	[type] DESC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tb_system_schedule]    Script Date: 2024-09-08 오전 12:06:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tb_system_schedule](
	[uid] [bigint] NOT NULL,
	[type] [tinyint] NOT NULL,
	[param] [varchar](128) NOT NULL,
	[val] [varchar](512) NOT NULL,
	[start_date] [datetime2](0) NOT NULL,
	[end_date] [datetime2](0) NOT NULL,
	[day_week] [varchar](16) NOT NULL,
	[start_time] [varchar](16) NOT NULL,
	[end_time] [varchar](16) NOT NULL,
	[dw_update_time] [datetime2](0) NOT NULL,
 CONSTRAINT [PK_tb_system_schedule] PRIMARY KEY CLUSTERED 
(
	[uid] DESC,
	[type] DESC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tb_test_iap_price]    Script Date: 2024-09-08 오전 12:06:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tb_test_iap_price](
	[product_id] [varchar](32) NOT NULL,
	[price] [bigint] NOT NULL,
	[dw_update_time] [datetime] NOT NULL,
 CONSTRAINT [PK_tb_test_iap_price] PRIMARY KEY CLUSTERED 
(
	[product_id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [dbo].[tb_sys_error_log] ADD  CONSTRAINT [df_tb_sys_error_log_dw_update_time]  DEFAULT (getdate()) FOR [dw_update_time]
GO
/****** Object:  StoredProcedure [dbo].[sp_character_ads_buff_update]    Script Date: 2024-09-08 오전 12:06:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE procedure [dbo].[sp_character_ads_buff_update]
(
	@db_uid int = 0,
	@db_buff_id int = 0,
	@db_buff_lv int = 0,
	@db_buff_exp int = 0,
	@db_buff_exp_time bigint = 0,
	@db_watch_exp_time bigint = 0,
	@db_watch_count int = 0,
	
	@sp_rtn int = 0 output, 
	@sp_msg varchar(128) = '' output
)
as
	SET XACT_ABORT ON
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
	SET NOCOUNT ON

	BEGIN TRY

	declare @utc_date datetime2 = sysutcdatetime();

	begin transaction

		merge dbo.tb_character_ads_buff as t_cab
		using ( select @db_uid as uid ) as s_cab
		on t_cab.uid = s_cab.uid and t_cab.buff_id = @db_buff_id
		when matched then
			update set	buff_lv = @db_buff_lv,
						buff_exp = @db_buff_exp,
						buff_exp_time = @db_buff_exp_time,
						watch_exp_time = @db_watch_exp_time,
						watch_count = @db_watch_count,
						dw_update_time = @utc_date
		when not matched by target then
			insert ([uid] ,[buff_id] ,[buff_lv] ,[buff_exp] ,[buff_exp_time] ,[watch_exp_time] ,[watch_count] ,[dw_update_time])
			values (@db_uid, @db_buff_id, @db_buff_lv, @db_buff_exp, @db_buff_exp_time, @db_watch_exp_time, @db_watch_count, @utc_date);

	commit transaction
	select	@sp_rtn = 0, 
			@sp_msg = 'success';
		return;
	END TRY
	BEGIN CATCH
		if XACT_STATE() <> 0 rollback transaction;
		select	@sp_rtn = ERROR_NUMBER(), @sp_msg = ERROR_MESSAGE();
		exec dbo.sp_sys_error_log_create;
		return;
	END CATCH
GO
/****** Object:  StoredProcedure [dbo].[sp_character_coin_count_list_update]    Script Date: 2024-09-08 오전 12:06:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE procedure [dbo].[sp_character_coin_count_list_update]
(
	@uid int = 0,
	@update_coins nvarchar(max) = '',
	@sp_rtn int = 0 output, 
	@sp_msg varchar(128) = '' output
)
as
	SET XACT_ABORT ON
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
	SET NOCOUNT ON

	BEGIN TRY
		declare @utc_date datetime2 = sysutcdatetime();

		begin transaction
			
			if LEN(@update_coins) > 0
			begin
				exec dbo.sp_json_update_coin_count
				@uid = @uid, @ref_json = @update_coins,
				@sp_rtn = @sp_rtn out , @sp_msg = @sp_msg out

				if @sp_rtn <> 0 
					begin 
						if XACT_STATE() <> 0 rollback transaction;
						return;
					end
			end

		commit transaction
		
		select	@sp_rtn = 0, 
				@sp_msg = 'success';
		return;
	END TRY
	BEGIN CATCH
		if XACT_STATE() <> 0 rollback transaction;
		select	@sp_rtn = ERROR_NUMBER(), @sp_msg = ERROR_MESSAGE();
		exec dbo.sp_sys_error_log_create;
		return;
	END CATCH
GO
/****** Object:  StoredProcedure [dbo].[sp_character_coin_count_update]    Script Date: 2024-09-08 오전 12:06:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE procedure [dbo].[sp_character_coin_count_update]
(
	@uid int = 0,
	@type nvarchar(32) = '',
	@value bigint = 0,
	@sp_rtn int = 0 output, 
	@sp_msg varchar(128) = '' output
)
as
	SET XACT_ABORT ON
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
	SET NOCOUNT ON

	BEGIN TRY
		declare @utc_date datetime2 = sysutcdatetime();

		begin transaction
			
			merge dbo.tb_character_coin as t_cc
			using ( select @uid as uid ) as s_cc
			on t_cc.uid = s_cc.uid and t_cc.type = @type
			when matched then
				update set	value += @value,
							dw_update_time = @utc_date
			when not matched by target then
				insert (uid, type, value, dw_update_time)
				values (@uid, @type, @value, @utc_date);
		
		commit transaction 
		
		
		select	@sp_rtn = 0, 
				@sp_msg = 'success';
		return;
	END TRY
	BEGIN CATCH
		if XACT_STATE() <> 0 rollback transaction;
		select	@sp_rtn = ERROR_NUMBER(), @sp_msg = ERROR_MESSAGE();
		exec dbo.sp_sys_error_log_create;
		return;
	END CATCH
GO
/****** Object:  StoredProcedure [dbo].[sp_character_coin_upsert]    Script Date: 2024-09-08 오전 12:06:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE procedure [dbo].[sp_character_coin_upsert]
(
	@uid int = 0,
	@type nvarchar(32) = '',
	@value bigint = 0,
	@sp_rtn int = 0 output, 
	@sp_msg varchar(128) = '' output
)
as
	SET XACT_ABORT ON
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
	SET NOCOUNT ON

	BEGIN TRY
		declare @utc_date datetime2 = sysutcdatetime();

		begin transaction

			merge dbo.tb_character_coin as t_cc
			using ( select @uid as uid ) as s_cc
			on t_cc.uid = s_cc.uid and t_cc.type = @type
			when matched then
				update set	value = @value,
							dw_update_time = @utc_date
			when not matched by target then
				insert (uid, type, value, dw_update_time)
				values (@uid, @type, @value, @utc_date);
		
		commit transaction
		
		
		select	@sp_rtn = 0, 
				@sp_msg = 'success';
		return;
	END TRY
	BEGIN CATCH
		if XACT_STATE() <> 0 rollback transaction;
		select	@sp_rtn = ERROR_NUMBER(), @sp_msg = ERROR_MESSAGE();
		exec dbo.sp_sys_error_log_create;
		return;
	END CATCH
GO
/****** Object:  StoredProcedure [dbo].[sp_character_coupon_use]    Script Date: 2024-09-08 오전 12:06:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE procedure [dbo].[sp_character_coupon_use]
(
	@uid int = 0,
	@coupon_id nvarchar(max) = '',
	@used_coupon_json nvarchar(max) = '',
	@update_items nvarchar(max) = '',
	@update_coins nvarchar(max) = '',
	
	@sp_rtn int = 0 output, 
	@sp_msg varchar(128) = '' output
)
as
	SET XACT_ABORT ON
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
	SET NOCOUNT ON

	BEGIN TRY
		declare @utc_date datetime2 = sysutcdatetime();
		declare @utc_time bigint = DATEDIFF(SECOND,{d '1970-01-01'}, @utc_date)
		
		begin transaction
			
			declare @is_exists bit = 
			(
				case when exists 
				(
					select 1
					from dbo.tb_system_coupon 
					where coupon_id = @coupon_id
					and cnt > 0
					and @utc_time between begin_time and expire_time
				) then 1 else 0 end
			)

			if @is_exists = 0
			begin
				select @sp_rtn = 1, @sp_msg ='fail_coupon'
				return;
			end

			update dbo.tb_system_coupon
			set cnt -= 1
			where coupon_id = @coupon_id

			merge dbo.tb_character_coupon as t_cc
				using ( select @uid as uid ) as s_cc
				on t_cc.uid = s_cc.uid
				when matched then
					update set	coupon_json = @used_coupon_json,
								dw_update_time = @utc_date
				when not matched by target then
					insert (uid, coupon_json, dw_update_time)
					values (@uid, @used_coupon_json, @utc_date);

			
			if LEN(@update_items) > 0
			begin
				exec dbo.sp_json_update_item_count
				@uid = @uid, @ref_json = @update_items,
				@sp_rtn = @sp_rtn out , @sp_msg = @sp_msg out

				if @sp_rtn <> 0 
					begin 
						if XACT_STATE() <> 0 rollback transaction;
						return;
					end
			end
			
			if LEN(@update_coins) > 0
			begin
				exec dbo.sp_json_update_coin_count
				@uid = @uid, @ref_json =@update_coins,
				@sp_rtn = @sp_rtn out, @sp_msg = @sp_msg out

				if @sp_rtn <> 0
					begin
						if XACT_STATE() <> 0 rollback transaction;
						return;
					end
			end

		commit transaction

		select	@sp_rtn = 0, 
				@sp_msg = 'success';
		return;
	END TRY
	BEGIN CATCH
		if XACT_STATE() <> 0 rollback transaction;
		select	@sp_rtn = ERROR_NUMBER(), @sp_msg = ERROR_MESSAGE();
		exec dbo.sp_sys_error_log_create;
		return;
	END CATCH
GO
/****** Object:  StoredProcedure [dbo].[sp_character_coupon_vaild]    Script Date: 2024-09-08 오전 12:06:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE procedure [dbo].[sp_character_coupon_vaild]
(
	@uid bigint,
	@coupon_id nvarchar(20),
	
	@sp_rtn int = 0 output, 
	@sp_msg varchar(128) = '' output
)
as
	SET XACT_ABORT ON
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
	SET NOCOUNT ON

	BEGIN TRY
	declare @utc_date datetime2 = sysutcdatetime();
	declare @utc_time bigint = DATEDIFF(SECOND,{d '1970-01-01'}, @utc_date)
	
	declare @is_exists bit = 
	(
		case when exists 
		(
			select 1
			from dbo.tb_system_coupon 
			where coupon_id = @coupon_id
			and cnt > 0
			and @utc_time between begin_time and expire_time
		) then 1 else 0 end
	)

	if @is_exists = 0
	begin
		select @sp_rtn = 1, @sp_msg ='fail_coupon'
		return;
	end
	
	select coupon_id, reward
	from dbo.tb_system_coupon
	where coupon_id = @coupon_id

	select	@sp_rtn = 0,
			@sp_msg = 'success';
	return;

	END TRY
	BEGIN CATCH
		if XACT_STATE() <> 0 rollback transaction;
		select	@sp_rtn = ERROR_NUMBER(), @sp_msg = ERROR_MESSAGE();
		exec dbo.sp_sys_error_log_create;
		return;
	END CATCH
GO
/****** Object:  StoredProcedure [dbo].[sp_character_create]    Script Date: 2024-09-08 오전 12:06:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE procedure [dbo].[sp_character_create]
(
	@uid int = 0,
	@name nvarchar(128) = '',
	@profile_id int = 0,

	@sp_rtn int = 0 output, 
	@sp_msg varchar(128) = '' output
)
as
	SET XACT_ABORT ON
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
	SET NOCOUNT ON

	BEGIN TRY
		declare @utc_date datetime2 = sysutcdatetime();
		declare @user_cnt int = 0
		declare @user_level int = 1;
		declare @user_exp int = 0;
		declare @level_point int = 0;
		declare @skin_id int = '1';
		declare @cur_time bigint = DATEDIFF(SECOND,{d '1970-01-01'}, @utc_date)
		declare @event_stage int = 1001;
		declare @device_id nvarchar(128) = ''; 
		declare @ad_skip bit = 'FALSE'
	

		begin transaction

			set @user_cnt = (
			select count(uid)
			from dbo.tb_character
			where uid = @uid)

			if @user_cnt = 0
			begin
				set @device_id = (select token_id from systemDB_individual.dbo.tb_account where uid = @uid)

				insert into dbo.tb_character
				(uid, device_id, name, event_stage, level, exp, level_point, ad_skip, profile_id, login_time, logout_time, dw_update_time)
				values
				(@uid, @device_id, @name, @event_stage, @user_level, @user_exp, @level_point, @ad_skip, @profile_id,@cur_time, @cur_time, @utc_date)
			end

			select uid, device_id
				from dbo.tb_character
				where uid = @uid

		commit transaction

		select	@sp_rtn = 0, 
				@sp_msg = 'success';
		return;
	END TRY
	BEGIN CATCH
		if XACT_STATE() <> 0 rollback transaction;
		select	@sp_rtn = ERROR_NUMBER(), @sp_msg = ERROR_MESSAGE();
		exec dbo.sp_sys_error_log_create;
		return;
	END CATCH
GO
/****** Object:  StoredProcedure [dbo].[sp_character_equip_prest_update]    Script Date: 2024-09-08 오전 12:06:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE procedure [dbo].[sp_character_equip_prest_update]
(
	@uid int = 0,
	@idx int = 0,
	@slot_json nvarchar(256) = '',
	@is_enable bit,
	@sp_rtn int = 0 output, 
	@sp_msg varchar(128) = '' output
)
as
	SET XACT_ABORT ON
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
	SET NOCOUNT ON

	BEGIN TRY
		declare @utc_date datetime2 = sysutcdatetime();

		begin transaction

			merge dbo.tb_character_equip_preset as t_cep
				using ( select @uid as uid ) as s_cep
				on t_cep.uid = s_cep.uid and t_cep.idx = @idx
				when matched then
					update set	equip_slot = @slot_json,
								is_enable = @is_enable,
								dw_update_time = @utc_date
				when not matched by target then
					insert (uid, idx, equip_slot, is_enable, dw_update_time)
					values (@uid, @idx, @slot_json, @is_enable, @utc_date);
		
		commit transaction

		select	@sp_rtn = 0, 
				@sp_msg = 'success';
		return;
	END TRY
	BEGIN CATCH
		if XACT_STATE() <> 0 rollback transaction;
		select	@sp_rtn = ERROR_NUMBER(), @sp_msg = ERROR_MESSAGE();
		exec dbo.sp_sys_error_log_create;
		return;
	END CATCH
GO
/****** Object:  StoredProcedure [dbo].[sp_character_event_roulette_update]    Script Date: 2024-09-08 오전 12:06:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



create procedure [dbo].[sp_character_event_roulette_update]
(
	@uid int = 0,
	@event_uid bigint = 0,
	@exclude_list varchar(max) = '',

	@update_items varchar(max) = '',
	@update_coins varchar(max) = '',
	@sp_rtn int = 0 output, 
	@sp_msg varchar(128) = '' output
)
as
	SET XACT_ABORT ON
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
	SET NOCOUNT ON

	BEGIN TRY
		declare @utc_date datetime2 = sysutcdatetime();

		begin transaction

			merge dbo.tb_character_event_roulette as t_cer
				using ( select @uid as uid ) as s_cs
				on t_cer.uid = s_cs.uid and t_cer.event_uid = @event_uid
				when matched then
					update set	exclude_list = @exclude_list,
								dw_update_time = @utc_date
				when not matched by target then
					insert (uid, event_uid, exclude_list, dw_update_time)
					values (@uid, @event_uid, @exclude_list, @utc_date);

			--update coin
			if LEN(@update_coins) > 0
				begin 
					exec dbo.sp_json_update_coin_count
						@uid = @uid, @ref_json = @update_coins,
						@sp_rtn = @sp_rtn out, @sp_msg = @sp_msg out;

					if @sp_rtn <> 0 
					begin 
						if XACT_STATE() <> 0 rollback transaction;
						return;
					end
				end

			--update item
			if LEN(@update_items) > 0
				begin
					exec dbo.sp_json_update_item_count
						@uid = @uid, @ref_json = @update_items,
						@sp_rtn = @sp_rtn out, @sp_msg = @sp_msg out;

					if @sp_rtn <> 0 
					begin 
						if XACT_STATE() <> 0 rollback transaction;
						return;
					end
				end

		commit transaction

		select	@sp_rtn = 0, 
				@sp_msg = 'success';
		return;
	END TRY
	BEGIN CATCH
		if XACT_STATE() <> 0 rollback transaction;
		select	@sp_rtn = ERROR_NUMBER(), @sp_msg = ERROR_MESSAGE();
		exec dbo.sp_sys_error_log_create;
		return;
	END CATCH
GO
/****** Object:  StoredProcedure [dbo].[sp_character_event_shop_update]    Script Date: 2024-09-08 오전 12:06:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



create procedure [dbo].[sp_character_event_shop_update]
(
	@uid int = 0,
	@event_uid bigint = 0,
	@shop_id int = 0,
	@buy_cnt int = 0,

	@update_items varchar(max) = '',
	@update_coins varchar(max) = '',
	@sp_rtn int = 0 output, 
	@sp_msg varchar(128) = '' output
)
as
	SET XACT_ABORT ON
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
	SET NOCOUNT ON

	BEGIN TRY
		declare @utc_date datetime2 = sysutcdatetime();

		begin transaction

			merge dbo.tb_character_event_shop as t_ces
				using ( select @uid as uid ) as s_cs
				on t_ces.uid = s_cs.uid and t_ces.event_uid = @event_uid and t_ces.shop_id = @shop_id
				when matched then
					update set	[limit_count] = @buy_cnt,
								dw_update_time = @utc_date
				when not matched by target then
					insert (uid, event_uid, shop_id, limit_count, dw_update_time)
					values (@uid, @event_uid, @shop_id, @buy_cnt, @utc_date);

			--update coin
			if LEN(@update_coins) > 0
				begin 
					exec dbo.sp_json_update_coin_count
						@uid = @uid, @ref_json = @update_coins,
						@sp_rtn = @sp_rtn out, @sp_msg = @sp_msg out;

					if @sp_rtn <> 0 
					begin 
						if XACT_STATE() <> 0 rollback transaction;
						return;
					end
				end

			--update item
			if LEN(@update_items) > 0
				begin
					exec dbo.sp_json_update_item_count
						@uid = @uid, @ref_json = @update_items,
						@sp_rtn = @sp_rtn out, @sp_msg = @sp_msg out;

					if @sp_rtn <> 0 
					begin 
						if XACT_STATE() <> 0 rollback transaction;
						return;
					end
				end

		commit transaction

		select	@sp_rtn = 0, 
				@sp_msg = 'success';
		return;
	END TRY
	BEGIN CATCH
		if XACT_STATE() <> 0 rollback transaction;
		select	@sp_rtn = ERROR_NUMBER(), @sp_msg = ERROR_MESSAGE();
		exec dbo.sp_sys_error_log_create;
		return;
	END CATCH
GO
/****** Object:  StoredProcedure [dbo].[sp_character_event_update]    Script Date: 2024-09-08 오전 12:06:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE procedure [dbo].[sp_character_event_update]
(
	@uid int = 0,
	@event_uid bigint = 0,
	@event_id int = 0,
	@start_date bigint = 0,
	@end_date bigint = 0,
	@coin_type varchar(128) = 0,

	@sp_rtn int = 0 output, 
	@sp_msg varchar(128) = '' output
)
as
	SET XACT_ABORT ON
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
	SET NOCOUNT ON

	BEGIN TRY
		declare @utc_date datetime2 = sysutcdatetime();

		begin transaction
			
			delete from dbo.tb_character_coin
			where uid = @uid and type = @coin_type

			merge dbo.tb_character_event as t_ce
				using ( select @uid as uid ) as s_cs
				on t_ce.uid = s_cs.uid and t_ce.event_uid = @event_uid and t_ce.event_id = @event_id
				when matched then
					update set	start_date = @start_date,
								end_date = @end_date,
								dw_update_time = @utc_date
				when not matched by target then
					insert (uid, event_uid, event_id, start_date, end_date, dw_update_time)
					values (@uid, @event_uid, @event_id, @start_date, @end_date, @utc_date);



		commit transaction

		select	@sp_rtn = 0, 
				@sp_msg = 'success';
		return;
	END TRY
	BEGIN CATCH
		if XACT_STATE() <> 0 rollback transaction;
		select	@sp_rtn = ERROR_NUMBER(), @sp_msg = ERROR_MESSAGE();
		exec dbo.sp_sys_error_log_create;
		return;
	END CATCH
GO
/****** Object:  StoredProcedure [dbo].[sp_character_gacha]    Script Date: 2024-09-08 오전 12:06:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE procedure [dbo].[sp_character_gacha]
(
	@uid int = 0,

	@update_items nvarchar(max) = '',
	@update_coins nvarchar(max) = '',

	@gacha_id int = 0,
	@gacha_lv int= 0,
	@gacha_exp bigint = 0,
	@gacha_rewarded int = 0,
	@sp_rtn int = 0 output, 
	@sp_msg varchar(128) = '' output
)
as
	SET XACT_ABORT ON
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
	SET NOCOUNT ON

	BEGIN TRY
		declare @utc_date datetime2 = sysutcdatetime();

		begin transaction

			merge dbo.tb_character_gacha as t_cg
				using ( select @uid as uid ) as s_cg
				on t_cg.uid = s_cg.uid and t_cg.id = @gacha_id
				when matched then
					update set	lv = @gacha_lv,
								exp = @gacha_exp,
								rewarded = @gacha_rewarded,
								dw_update_time = @utc_date
				when not matched by target then
					insert (uid, id, lv, exp, rewarded, dw_update_time)
					values (@uid, @gacha_id, @gacha_lv, @gacha_exp, @gacha_rewarded, @utc_date);

			if LEN(@update_items) > 0
			begin
				exec dbo.sp_json_update_item_count
				@uid = @uid, @ref_json = @update_items,
				@sp_rtn = @sp_rtn out , @sp_msg = @sp_msg out

				if @sp_rtn <> 0 
					begin 
						if XACT_STATE() <> 0 rollback transaction;
						return;
					end
			end
			
			if LEN(@update_coins) > 0
			begin
				exec dbo.sp_json_update_coin_count
				@uid = @uid, @ref_json =@update_coins,
				@sp_rtn = @sp_rtn out, @sp_msg = @sp_msg out

				if @sp_rtn <> 0
					begin
						if XACT_STATE() <> 0 rollback transaction;
						return;
					end
			end

		commit transaction

		select	@sp_rtn = 0, 
				@sp_msg = 'success';
		return;
	END TRY
	BEGIN CATCH
		if XACT_STATE() <> 0 rollback transaction;
		select	@sp_rtn = ERROR_NUMBER(), @sp_msg = ERROR_MESSAGE();
		exec dbo.sp_sys_error_log_create;
		return;
	END CATCH
GO
/****** Object:  StoredProcedure [dbo].[sp_character_gacha_level_rewared]    Script Date: 2024-09-08 오전 12:06:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE procedure [dbo].[sp_character_gacha_level_rewared]
(
	@uid int = 0,

	@update_items nvarchar(max) = '',
	@update_coins nvarchar(max) = '',

	@gacha_id int = 0,
	@gacha_lv int= 0,
	@gacha_exp bigint = 0,
	@gacha_rewarded int = 0,
	@sp_rtn int = 0 output, 
	@sp_msg varchar(128) = '' output
)
as
	SET XACT_ABORT ON
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
	SET NOCOUNT ON

	BEGIN TRY
		declare @utc_date datetime2 = sysutcdatetime();

		begin transaction

			update dbo.tb_character_gacha
			set lv = @gacha_lv, exp = @gacha_exp, rewarded = @gacha_rewarded
			where uid = @uid and id = @gacha_id
			
			if @@ROWCOUNT = 0 --not found case
			begin
				if XACT_STATE() <> 0 rollback transaction;
					select	@sp_rtn = -1, 
							@sp_msg = 'not found data';
					return;
			end

			--item update
			if LEN(@update_items) > 0
			begin
				exec dbo.sp_json_update_item_count
				@uid = @uid, @ref_json = @update_items,
				@sp_rtn = @sp_rtn out , @sp_msg = @sp_msg out

				if @sp_rtn <> 0 
					begin 
						if XACT_STATE() <> 0 rollback transaction;
						return;
					end
			end
			
			--coin update
			if LEN(@update_coins) > 0
			begin
				exec dbo.sp_json_update_coin_count
				@uid = @uid, @ref_json =@update_coins,
				@sp_rtn = @sp_rtn out, @sp_msg = @sp_msg out

				if @sp_rtn <> 0
					begin
						if XACT_STATE() <> 0 rollback transaction;
						return;
					end
			end

		commit transaction 

		select	@sp_rtn = 0, 
				@sp_msg = 'success';
		return;
	END TRY
	BEGIN CATCH
		if XACT_STATE() <> 0 rollback transaction;
		select	@sp_rtn = ERROR_NUMBER(), @sp_msg = ERROR_MESSAGE();
		exec dbo.sp_sys_error_log_create;
		return;
	END CATCH
GO
/****** Object:  StoredProcedure [dbo].[sp_character_gold_growth_update]    Script Date: 2024-09-08 오전 12:06:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE procedure [dbo].[sp_character_gold_growth_update]
(
	@uid int = 0,
	@update_coin nvarchar(256) = '',
	@type int =0,
	@value bigint = 0,
	@sp_rtn int = 0 output, 
	@sp_msg varchar(128) = '' output
)
as
	SET XACT_ABORT ON
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
	SET NOCOUNT ON

	BEGIN TRY
		declare @utc_date datetime2 = sysutcdatetime();

		begin transaction
		
			merge dbo.tb_character_growth_gold as t_cc
				using ( select @uid as uid ) as s_cc
				on t_cc.uid = s_cc.uid and t_cc.id = @type
				when matched then
					update set	value = @value,
								dw_update_time = @utc_date
				when not matched by target then
					insert (uid, id, value, dw_update_time)
					values (@uid, @type, @value, @utc_date);

					--asset update;
			if LEN(@update_coin) > 0
				begin 
					exec dbo.sp_json_update_coin_count
							@uid = @uid, @ref_json = @update_coin,
							@sp_rtn = @sp_rtn out, @sp_msg = @sp_msg out;

					if @sp_rtn <> 0 
					begin 
						if XACT_STATE() <> 0 rollback transaction;
						return;
					end
				end

		commit transaction

		select	@sp_rtn = 0, 
				@sp_msg = 'success';
		return;
	END TRY
	BEGIN CATCH
		if XACT_STATE() <> 0 rollback transaction;
		select	@sp_rtn = ERROR_NUMBER(), @sp_msg = ERROR_MESSAGE();
		exec dbo.sp_sys_error_log_create;
		return;
	END CATCH
GO
/****** Object:  StoredProcedure [dbo].[sp_character_item_breakthrough]    Script Date: 2024-09-08 오전 12:06:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE procedure [dbo].[sp_character_item_breakthrough]
(
	@uid int = 0,

	@update_items nvarchar(max) = '',
	@update_coins nvarchar(max) = '',

	@item_uid bigint = 0,
	@rand_option varchar(max)= '',
	@sp_rtn int = 0 output, 
	@sp_msg varchar(128) = '' output
)
as
	SET XACT_ABORT ON
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
	SET NOCOUNT ON

	BEGIN TRY
		declare @utc_date datetime2 = sysutcdatetime();

		begin transaction

			update dbo.tb_character_item
			set random_option = @rand_option
			where uid = @uid and item_id = @item_uid

			if LEN(@update_items) > 0
			begin
				exec dbo.sp_json_update_item_count
				@uid = @uid, @ref_json = @update_items,
				@sp_rtn = @sp_rtn out , @sp_msg = @sp_msg out

				if @sp_rtn <> 0 
					begin 
						if XACT_STATE() <> 0 rollback transaction;
						return;
					end
			end
			
			if LEN(@update_coins) > 0
			begin
				exec dbo.sp_json_update_coin_count
				@uid = @uid, @ref_json =@update_coins,
				@sp_rtn = @sp_rtn out, @sp_msg = @sp_msg out

				if @sp_rtn <> 0
					begin
						if XACT_STATE() <> 0 rollback transaction;
						return;
					end
			end

		commit transaction

		select	@sp_rtn = 0, 
				@sp_msg = 'success';
		return;
	END TRY
	BEGIN CATCH
		if XACT_STATE() <> 0 rollback transaction;
		select	@sp_rtn = ERROR_NUMBER(), @sp_msg = ERROR_MESSAGE();
		exec dbo.sp_sys_error_log_create;
		return;
	END CATCH
GO
/****** Object:  StoredProcedure [dbo].[sp_character_item_consume]    Script Date: 2024-09-08 오전 12:06:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE procedure [dbo].[sp_character_item_consume]
(
	@uid int = 0,

	@update_items nvarchar(max) = '',
	@update_coins nvarchar(max) = '',
	@delete_items nvarchar(max) = '',
	
	@sp_rtn int = 0 output, 
	@sp_msg varchar(128) = '' output
)
as
	SET XACT_ABORT ON
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
	SET NOCOUNT ON

	BEGIN TRY
		declare @utc_date datetime2 = sysutcdatetime();

		begin transaction

			if LEN(@delete_items) > 0
			begin
				exec sp_json_delete_item_count
				@uid = @uid, @ref_json = @delete_items,
				@sp_rtn = @sp_rtn out , @sp_msg = @sp_msg out
				
				if @sp_rtn <> 0 
					begin 
						if XACT_STATE() <> 0 rollback transaction;
						return;
					end
			end



			if LEN(@update_items) > 0
			begin
				exec dbo.sp_json_update_item_count
				@uid = @uid, @ref_json = @update_items,
				@sp_rtn = @sp_rtn out , @sp_msg = @sp_msg out

				if @sp_rtn <> 0 
					begin 
						if XACT_STATE() <> 0 rollback transaction;
						return;
					end
			end
			
			if LEN(@update_coins) > 0
			begin
				exec dbo.sp_json_update_coin_count
				@uid = @uid, @ref_json =@update_coins,
				@sp_rtn = @sp_rtn out, @sp_msg = @sp_msg out

				if @sp_rtn <> 0
					begin
						if XACT_STATE() <> 0 rollback transaction;
						return;
					end
			end

		commit transaction

		select	@sp_rtn = 0, 
				@sp_msg = 'success';
		return;
	END TRY
	BEGIN CATCH
		if XACT_STATE() <> 0 rollback transaction;
		select	@sp_rtn = ERROR_NUMBER(), @sp_msg = ERROR_MESSAGE();
		exec dbo.sp_sys_error_log_create;
		return;
	END CATCH
GO
/****** Object:  StoredProcedure [dbo].[sp_character_item_count_list_update]    Script Date: 2024-09-08 오전 12:06:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE procedure [dbo].[sp_character_item_count_list_update]
(
	@uid int = 0,
	@update_items nvarchar(max) = '',
	@sp_rtn int = 0 output, 
	@sp_msg varchar(128) = '' output
)
as
	SET XACT_ABORT ON
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
	SET NOCOUNT ON

	BEGIN TRY
		declare @utc_date datetime2 = sysutcdatetime();

		begin transaction

			if LEN(@update_items) > 0
			begin
				exec dbo.sp_json_update_item_count
				@uid = @uid, @ref_json = @update_items,
				@sp_rtn = @sp_rtn out , @sp_msg = @sp_msg out

				if @sp_rtn <> 0 
					begin 
						if XACT_STATE() <> 0 rollback transaction;
						return;
					end
			end
		
		commit transaction
		
		select	@sp_rtn = 0, 
				@sp_msg = 'success';
		return;
	END TRY
	BEGIN CATCH
		if XACT_STATE() <> 0 rollback transaction;
		select	@sp_rtn = ERROR_NUMBER(), @sp_msg = ERROR_MESSAGE();
		exec dbo.sp_sys_error_log_create;
		return;
	END CATCH
GO
/****** Object:  StoredProcedure [dbo].[sp_character_item_count_update]    Script Date: 2024-09-08 오전 12:06:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE procedure [dbo].[sp_character_item_count_update]
(
	@uid int = 0,
	@itemid bigint = 0,
	@tableid nvarchar(32) = '',
	@level int = 0,
	@count bigint = 0,
	@sp_rtn int = 0 output, 
	@sp_msg varchar(128) = '' output
)
as
	SET XACT_ABORT ON
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
	SET NOCOUNT ON

	BEGIN TRY
		declare @utc_date datetime2 = sysutcdatetime();
		declare @random_option varchar(max) = '';

		begin transaction

			merge dbo.tb_character_item as t_ci
				using ( select @uid as uid ) as s_ci
				on t_ci.uid = s_ci.uid and t_ci.item_id = @itemid
				when matched then
					update set	t_ci.count += @count,
								dw_update_time = @utc_date
				when not matched by target then
					insert (uid, item_id, table_id, level, count, in_used, random_option, dw_update_time)
					values (@uid, @itemId, @tableid, @level, @count, 'false' , @random_option ,@utc_date);

		commit transaction
		
		select	@sp_rtn = 0, 
				@sp_msg = 'success';
		return;
	END TRY
	BEGIN CATCH
		if XACT_STATE() <> 0 rollback transaction;
		select	@sp_rtn = ERROR_NUMBER(), @sp_msg = ERROR_MESSAGE();
		exec dbo.sp_sys_error_log_create;
		return;
	END CATCH
GO
/****** Object:  StoredProcedure [dbo].[sp_character_item_knight_preset_update]    Script Date: 2024-09-08 오전 12:06:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE procedure [dbo].[sp_character_item_knight_preset_update]
(
	@uid int = 0,
	@idx int = 0,
	@slot_json nvarchar(max) = '',
	@is_enable bit,
	@sp_rtn int = 0 output, 
	@sp_msg varchar(128) = '' output
)
as
	SET XACT_ABORT ON
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
	SET NOCOUNT ON

	BEGIN TRY
		declare @utc_date datetime2 = sysutcdatetime();

		begin transaction

			merge dbo.tb_character_knight_preset as t_ckp
				using ( select @uid as uid ) as s_cep
				on t_ckp.uid = s_cep.uid and t_ckp.idx = @idx
				when matched then
					update set	equip_slot = @slot_json,
								is_enable = @is_enable,
								dw_update_time = @utc_date
				when not matched by target then
					insert (uid, idx, equip_slot, is_enable, dw_update_time)
					values (@uid, @idx, @slot_json, @is_enable, @utc_date);

		commit transaction

		select	@sp_rtn = 0, 
				@sp_msg = 'success';
		return;
	END TRY
	BEGIN CATCH
		if XACT_STATE() <> 0 rollback transaction;
		select	@sp_rtn = ERROR_NUMBER(), @sp_msg = ERROR_MESSAGE();
		exec dbo.sp_sys_error_log_create;
		return;
	END CATCH
GO
/****** Object:  StoredProcedure [dbo].[sp_character_item_knight_update]    Script Date: 2024-09-08 오전 12:06:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE procedure [dbo].[sp_character_item_knight_update]
(
	@uid bigint = 0,
	@itemid bigint = 0,
	@in_used bit = 0,
	@sp_rtn int = 0 output, 
	@sp_msg varchar(128) = '' output
)
as
	SET XACT_ABORT ON
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
	SET NOCOUNT ON

	BEGIN TRY
		declare @utc_date datetime2 = sysutcdatetime();
		
		begin transaction

			update dbo.tb_character_item
			set in_used = @in_used
			where uid = @uid and item_id = @itemid

		commit transaction

		select	@sp_rtn = 0, 
				@sp_msg = 'success';
		return;
	END TRY
	BEGIN CATCH
		if XACT_STATE() <> 0 rollback transaction;
		select	@sp_rtn = ERROR_NUMBER(), @sp_msg = ERROR_MESSAGE();
		exec dbo.sp_sys_error_log_create;
		return;
	END CATCH
GO
/****** Object:  StoredProcedure [dbo].[sp_character_item_knight_upgrade]    Script Date: 2024-09-08 오전 12:06:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


create procedure [dbo].[sp_character_item_knight_upgrade]
(
	@uid int = 0,
	@itemid bigint = 0,
	@tableid nvarchar(32) = '',
	@level int = 0,
	@count bigint = 0,
	@rand_option varchar(max) = '',
	@update_coins nvarchar(max) = '',
	@update_items varchar(max) = '',
	@sp_rtn int = 0 output, 
	@sp_msg varchar(128) = '' output
)
as
	SET XACT_ABORT ON
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
	SET NOCOUNT ON

	BEGIN TRY
		declare @utc_date datetime2 = sysutcdatetime();
		--declare @random_option varchar(512) = ''

		begin transaction

		merge dbo.tb_character_item as t_ci
			using ( select @uid as uid ) as s_ci
			on t_ci.uid = s_ci.uid and t_ci.item_id = @itemid
			when matched then
				update set	t_ci.level = @level,
							t_ci.random_option = @rand_option,
							dw_update_time = @utc_date
			when not matched by target then
				insert 
				(
					uid, item_id, table_id, level, 
					count, in_used, random_option, dw_update_time
				)
				values 
				(
					@uid, @itemId, @tableid, @level, 
					@count, 'false', @rand_option, @utc_date
				);
		
				if LEN(@update_coins) > 0
					begin 
						exec dbo.sp_json_update_coin_count
								@uid = @uid, @ref_json = @update_coins,
								@sp_rtn = @sp_rtn out, @sp_msg = @sp_msg out;

						if @sp_rtn <> 0 
						begin 
							if XACT_STATE() <> 0 rollback transaction;
							return;
						end
					end

				if LEN(@update_items) > 0
				begin
					exec dbo.sp_json_update_item_count
						@uid = @uid, @ref_json = @update_items,
						@sp_rtn = @sp_rtn out, @sp_msg = @sp_msg out;

						if @sp_rtn <> 0 
						begin 
							if XACT_STATE() <> 0 rollback transaction;
							return;
						end
				end

		commit transaction


		select	@sp_rtn = 0, 
				@sp_msg = 'success';
		return;
	END TRY
	BEGIN CATCH
		if XACT_STATE() <> 0 rollback transaction;
		select	@sp_rtn = ERROR_NUMBER(), @sp_msg = ERROR_MESSAGE();
		exec dbo.sp_sys_error_log_create;
		return;
	END CATCH
GO
/****** Object:  StoredProcedure [dbo].[sp_character_item_level_update]    Script Date: 2024-09-08 오전 12:06:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE procedure [dbo].[sp_character_item_level_update]
(
	@uid int = 0,
	@itemid bigint = 0,
	@tableid nvarchar(32) = '',
	@level int = 0,
	@count bigint = 0,
	@update_coins nvarchar(max) = '',
	@update_items varchar(max) = '',
	@sp_rtn int = 0 output, 
	@sp_msg varchar(128) = '' output
)
as
	SET XACT_ABORT ON
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
	SET NOCOUNT ON

	BEGIN TRY
		declare @utc_date datetime2 = sysutcdatetime();
		declare @rand_option varchar(512) = ''

		begin transaction

		merge dbo.tb_character_item as t_ci
			using ( select @uid as uid ) as s_ci
			on t_ci.uid = s_ci.uid and t_ci.item_id = @itemid
			when matched then
				update set	t_ci.level = @level,
							dw_update_time = @utc_date
			when not matched by target then
				insert 
				(
					uid, item_id, table_id, level, 
					count, in_used, random_option, dw_update_time
				)
				values 
				(
					@uid, @itemId, @tableid, @level, 
					@count, 'false', @rand_option, @utc_date
				);
		
				if LEN(@update_coins) > 0
					begin 
						exec dbo.sp_json_update_coin_count
								@uid = @uid, @ref_json = @update_coins,
								@sp_rtn = @sp_rtn out, @sp_msg = @sp_msg out;

						if @sp_rtn <> 0 
						begin 
							if XACT_STATE() <> 0 rollback transaction;
							return;
						end
					end

				if LEN(@update_items) > 0
				begin
					exec dbo.sp_json_update_item_count
						@uid = @uid, @ref_json = @update_items,
						@sp_rtn = @sp_rtn out, @sp_msg = @sp_msg out;

						if @sp_rtn <> 0 
						begin 
							if XACT_STATE() <> 0 rollback transaction;
							return;
						end
				end

		commit transaction


		select	@sp_rtn = 0, 
				@sp_msg = 'success';
		return;
	END TRY
	BEGIN CATCH
		if XACT_STATE() <> 0 rollback transaction;
		select	@sp_rtn = ERROR_NUMBER(), @sp_msg = ERROR_MESSAGE();
		exec dbo.sp_sys_error_log_create;
		return;
	END CATCH
GO
/****** Object:  StoredProcedure [dbo].[sp_character_item_rand_option_update]    Script Date: 2024-09-08 오전 12:06:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE procedure [dbo].[sp_character_item_rand_option_update]
(
	@uid int = 0,

	@update_items nvarchar(max) = '',
	@update_coins nvarchar(max) = '',

	@item_uid bigint = 0,
	@rand_option varchar(max)= '',
	@sp_rtn int = 0 output, 
	@sp_msg varchar(128) = '' output
)
as
	SET XACT_ABORT ON
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
	SET NOCOUNT ON

	BEGIN TRY
		declare @utc_date datetime2 = sysutcdatetime();

		begin transaction

			update dbo.tb_character_item
			set random_option = @rand_option
			where uid = @uid and item_id = @item_uid

			if LEN(@update_items) > 0
			begin
				exec dbo.sp_json_update_item_count
				@uid = @uid, @ref_json = @update_items,
				@sp_rtn = @sp_rtn out , @sp_msg = @sp_msg out

				if @sp_rtn <> 0 
					begin 
						if XACT_STATE() <> 0 rollback transaction;
						return;
					end
			end
			
			if LEN(@update_coins) > 0
			begin
				exec dbo.sp_json_update_coin_count
				@uid = @uid, @ref_json =@update_coins,
				@sp_rtn = @sp_rtn out, @sp_msg = @sp_msg out

				if @sp_rtn <> 0
					begin
						if XACT_STATE() <> 0 rollback transaction;
						return;
					end
			end

		commit transaction

		select	@sp_rtn = 0, 
				@sp_msg = 'success';
		return;
	END TRY
	BEGIN CATCH
		if XACT_STATE() <> 0 rollback transaction;
		select	@sp_rtn = ERROR_NUMBER(), @sp_msg = ERROR_MESSAGE();
		exec dbo.sp_sys_error_log_create;
		return;
	END CATCH
GO
/****** Object:  StoredProcedure [dbo].[sp_character_item_sell]    Script Date: 2024-09-08 오전 12:06:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE procedure [dbo].[sp_character_item_sell]
(
	@uid int = 0,
	@update_coins nvarchar(max) = '',
	@update_items varchar(max) = '',
	@sp_rtn int = 0 output, 
	@sp_msg varchar(128) = '' output
)
as
	SET XACT_ABORT ON
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
	SET NOCOUNT ON

	BEGIN TRY
		declare @utc_date datetime2 = sysutcdatetime();
		declare @rand_option varchar(512) = ''

		begin transaction

			if LEN(@update_coins) > 0
			begin 
				exec dbo.sp_json_update_coin_count
						@uid = @uid, @ref_json = @update_coins,
						@sp_rtn = @sp_rtn out, @sp_msg = @sp_msg out;

				if @sp_rtn <> 0 
				begin 
					if XACT_STATE() <> 0 rollback transaction;
					return;
				end
			end

			if LEN(@update_items) > 0
			begin
				exec dbo.sp_json_update_item_count
					@uid = @uid, @ref_json = @update_items,
					@sp_rtn = @sp_rtn out, @sp_msg = @sp_msg out;

					if @sp_rtn <> 0 
					begin 
						if XACT_STATE() <> 0 rollback transaction;
						return;
					end
			end

		commit transaction



		select	@sp_rtn = 0, 
				@sp_msg = 'success';
		return;
	END TRY
	BEGIN CATCH
		if XACT_STATE() <> 0 rollback transaction;
		select	@sp_rtn = ERROR_NUMBER(), @sp_msg = ERROR_MESSAGE();
		exec dbo.sp_sys_error_log_create;
		return;
	END CATCH
GO
/****** Object:  StoredProcedure [dbo].[sp_character_level_growth_update]    Script Date: 2024-09-08 오전 12:06:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE procedure [dbo].[sp_character_level_growth_update]
(
	@uid int = 0,
	@type int =0,
	@value bigint = 0,
	@level_point int = 0,
	@sp_rtn int = 0 output, 
	@sp_msg varchar(128) = '' output
)
as
	SET XACT_ABORT ON
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
	SET NOCOUNT ON

	BEGIN TRY
		declare @utc_date datetime2 = sysutcdatetime();
			
			begin transaction
				--growth_level upsert
				merge dbo.tb_character_growth_level as t_cc
					using ( select @uid as uid ) as s_cc
					on t_cc.uid = s_cc.uid and t_cc.id = @type
					when matched then
						update set	value = @value,
									dw_update_time = @utc_date
					when not matched by target then
						insert (uid, id, value, dw_update_time)
						values (@uid, @type, @value, @utc_date);

				--user info
				update dbo.tb_character
				set level_point = @level_point 
				where uid = @uid 

			commit transaction
		
		select	@sp_rtn = 0, 
				@sp_msg = 'success';
		return;
	END TRY
	BEGIN CATCH
		if XACT_STATE() <> 0 rollback transaction;
		select	@sp_rtn = ERROR_NUMBER(), @sp_msg = ERROR_MESSAGE();
		exec dbo.sp_sys_error_log_create;
		return;
	END CATCH
GO
/****** Object:  StoredProcedure [dbo].[sp_character_login]    Script Date: 2024-09-08 오전 12:06:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE procedure [dbo].[sp_character_login]
(
	@uid bigint = 0,
	@sp_rtn int = 0 output, 
	@sp_msg varchar(128) = '' output
)
as
	SET XACT_ABORT ON
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
	SET NOCOUNT ON

	BEGIN TRY
		declare @utc_date datetime2 = sysutcdatetime();
		declare @login_time bigint = DATEDIFF(SECOND,{d '1970-01-01'}, @utc_date)
		
		--logintime update
		update dbo.tb_character
		set login_time = @login_time
		where uid = @uid

		--info
		select uid, device_id, name, event_stage , level, exp, level_point, ad_skip, profile_id, login_time, logout_time
		from dbo.tb_character
		where uid= @uid;
		
		--stage
		select type, cur_tid, max_tid, total_cnt, is_loop
		from dbo.tb_character_stage
		where uid = @uid;

		--coin
		select type, value
		from dbo.tb_character_coin
		where uid = @uid

		--growth gold
		select id, value
		from dbo.tb_character_growth_gold
		where uid = @uid

		--growth level
		select id, value
		from dbo.tb_character_growth_level
		where uid = @uid

		--quest main
		select id, idx, val, state
		from dbo.tb_character_quest_main
		where uid = @uid
		
		--itme
		select item_id, table_id, level, count, in_used, random_option
		from dbo.tb_character_item
		where uid = @uid

		--item equip preset
		select idx, equip_slot, is_enable
		from dbo.tb_character_equip_preset
		where uid = @uid

		--pref
		select type, strval
		from dbo.tb_character_pref
		where uid = @uid

		--knight preset
		select idx, equip_slot, is_enable
		from dbo.tb_character_knight_preset
		where uid = @uid

		--gacha level
		select id, lv, exp, rewarded
		from dbo.tb_character_gacha
		where uid = @uid

		--skill
		select group_id, tid, level, is_learend
		from dbo.tb_character_skill
		where uid = @uid

		--skill preset
		select idx, equip_slot, is_enable
		from dbo.tb_character_skill_preset
		where uid = @uid

		--post
		--insert into dbo.tb_character_post
		--( 
		--	uid, id, type, title, 
		--	msg, is_read, is_reward, begin_time, expire_time, 
		--	reward, dw_update_time
		--)		
		--select
		--    @uid, sp.id, sp.type, sp.title, 
		--	sp.msg, 'FALSE' as read_flag, 'FALSE' as reward_flag, sp.begin_time, sp.expire_time, 
		--    sp.reward, sp.dw_update_time
		--from dbo.tb_system_post as sp
		--left outer join dbo.tb_character_post as cp
		--on cp.id = sp.id and cp.type = sp.type and cp.uid = @uid
		--where cp.id is null
		--and sp.begin_time < @login_time
		--and @login_time < sp.expire_time;

		delete from dbo.tb_character_post
		where uid = @uid and expire_time <= @login_time

		--select id, type, title, msg, is_read, is_reward, begin_time, expire_time, reward
		--from dbo.tb_character_post
		--where uid = @uid

		--coupon
		select coupon_json
		from dbo.tb_character_coupon
		where uid = @uid

		--rank reward
		select type, state, val, exp_time
		from dbo.tb_character_rank_reward
		where uid = @uid

		--quest repeat
		select id, idx, val, state, pass_rewarded
		from dbo.tb_character_quest_repeat
		where uid = @uid

		--quest daily
		select id, idx, val, state, exp_time
		from dbo.tb_character_quest_daily
		where uid = @uid

		--quest checkin
		select quest_id, id, idx, val, state, exp_time
		from dbo.tb_character_quest_checkin
		where uid = @uid

		--quest_pass
		select quest_id, id, idx, val , state, pass_rewarded, pass_active
		from dbo.tb_character_quest_pass
		where uid = @uid

		--relic
		select group_id, lv, bonus_prob
		from dbo.tb_character_relic
		where uid = @uid

		--adsbuff
		select buff_id, buff_lv, buff_exp, buff_exp_time, watch_exp_time, watch_count
		from dbo.tb_character_ads_buff
		where uid = @uid

		--stage skill
		select type, equip_slot
		from dbo.tb_character_stage_skill
		where uid = @uid
		
		--event
		select event_uid, event_id, start_date, end_date
		from dbo.tb_character_event
		where uid = @uid

		--quest event
		select id, quest_id, idx, val, state, exp_time
		from dbo.tb_character_quest_event
		where uid = @uid

		--event shop
		select event_uid, shop_id, limit_count
		from dbo.tb_character_event_shop
		where uid = @uid

		--event roulette
		select event_uid, exclude_list
		from dbo.tb_character_event_roulette
		where uid = @uid

		select	@sp_rtn = 0, 
				@sp_msg = 'success';
		return;
	END TRY
	BEGIN CATCH
		if XACT_STATE() <> 0 rollback transaction;
		select	@sp_rtn = ERROR_NUMBER(), @sp_msg = ERROR_MESSAGE();
		exec dbo.sp_sys_error_log_create;
		return;
	END CATCH
GO
/****** Object:  StoredProcedure [dbo].[sp_character_logout]    Script Date: 2024-09-08 오전 12:06:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE procedure [dbo].[sp_character_logout]
(
	@uid int = 0,
	@user_level int =0,
	@user_exp bigint = 0,
	@user_level_point int = 0,
	@user_ad_skip bit = 'FALSE',
	@user_profile_id int = 0,

	@sp_rtn int = 0 output, 
	@sp_msg varchar(128) = '' output
)
as
	SET XACT_ABORT ON
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
	SET NOCOUNT ON

	BEGIN TRY
		declare @utc_date datetime2 = sysutcdatetime();
		declare @logout_time bigint = DATEDIFF(SECOND,{d '1970-01-01'}, @utc_date)

		begin transaction

		update dbo.tb_character
		set 
			level = @user_level, 
			exp = @user_exp, 
			level_point = @user_level_point, 
			ad_skip = @user_ad_skip,
			profile_id = @user_profile_id,
			logout_time = @logout_time
		where uid = @uid
		
		commit transaction;

		select	@sp_rtn = 0, 
				@sp_msg = 'success';
		return;
	END TRY
	BEGIN CATCH
		if XACT_STATE() <> 0 rollback transaction;
		select	@sp_rtn = ERROR_NUMBER(), @sp_msg = ERROR_MESSAGE();
		exec dbo.sp_sys_error_log_create;
		return;
	END CATCH
GO
/****** Object:  StoredProcedure [dbo].[sp_character_mission_list_update]    Script Date: 2024-09-08 오전 12:06:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



create procedure [dbo].[sp_character_mission_list_update]
(
	@uid int = 0,
	@mission_json nvarchar(max) = '',

	@sp_rtn int = 0 output, 
	@sp_msg varchar(128) = '' output
)
as
	SET XACT_ABORT ON
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
	SET NOCOUNT ON

	BEGIN TRY
		declare @utc_date datetime2 = sysutcdatetime();

		begin transaction
		merge dbo.tb_character_mission as t_cm
			using 
			(
				select ID, Idx, Val, State, PassRewarded
				from openjson(@mission_json) with
					(
						ID int, Idx int, Val bigint, State tinyint, PassRewarded bit
					)
			) as s_cm(ID,Idx, Val, State, PassRewarded)
			on t_cm.uid = @uid and
				t_cm.ID = s_cm.ID
			when matched then
				update set	t_cm.idx = s_cm.idx, t_cm.val = s_cm.Val,
							t_cm.state = s_cm.State, t_cm.pass_rewarded = s_cm.PassRewarded,
							dw_update_time = @utc_date
			when not matched by target then
				insert 
				(
					uid, id, idx, val, state, pass_rewarded, dw_update_time
				)
				values 
				(
					@uid, s_cm.ID, s_cm.Idx, s_cm.Val, s_cm.State, s_cm.PassRewarded, @utc_date
				);
			
		commit transaction
		
		select	@sp_rtn = 0, 
				@sp_msg = 'success';
		return;
	END TRY
	BEGIN CATCH
		if XACT_STATE() <> 0 rollback transaction;
		select	@sp_rtn = ERROR_NUMBER(), @sp_msg = ERROR_MESSAGE();
		exec dbo.sp_sys_error_log_create;
		return;
	END CATCH
GO
/****** Object:  StoredProcedure [dbo].[sp_character_mission_rewarded]    Script Date: 2024-09-08 오전 12:06:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE procedure [dbo].[sp_character_mission_rewarded]
(
	@uid int = 0,
	@mission_id int = 0,
	@mission_idx int = 0,
	@mission_val bigint = 0,
	@mission_state tinyint = 0,
	@mission_pass_rewarded bit,
	@update_coin nvarchar(max) = '',
	@update_item nvarchar(max) = '',
	@sp_rtn int = 0 output, 
	@sp_msg varchar(128) = '' output
)
as
	SET XACT_ABORT ON
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
	SET NOCOUNT ON

	BEGIN TRY
		declare @utc_date datetime2 = sysutcdatetime();
			
			begin transaction
			--growth_level upsert
				merge dbo.tb_character_mission as t_cm
					using ( select @uid as uid ) as s_cm
					on t_cm.uid = s_cm.uid and t_cm.id = @mission_id
					when matched then
						update set	idx = @mission_idx,
									val = @mission_val,
									state = @mission_state,
									pass_rewarded = @mission_pass_rewarded,
									dw_update_time = @utc_date
					when not matched by target then
						insert (uid, id, idx, val, state, pass_rewarded, dw_update_time)
						values (@uid, @mission_id, @mission_idx, @mission_val, @mission_state, @mission_pass_rewarded, @utc_date);

				--update coin
				if LEN(@update_coin) > 0
					begin 
						exec dbo.sp_json_update_coin_count
							@uid = @uid, @ref_json = @update_coin,
							@sp_rtn = @sp_rtn out, @sp_msg = @sp_msg out;

						if @sp_rtn <> 0 
						begin 
							if XACT_STATE() <> 0 rollback transaction;
							return;
						end
					end

				--update item
				if LEN(@update_item) > 0
					begin
						exec dbo.sp_json_update_item_count
							@uid = @uid, @ref_json = @update_item,
							@sp_rtn = @sp_rtn out, @sp_msg = @sp_msg out;

						if @sp_rtn <> 0 
						begin 
							if XACT_STATE() <> 0 rollback transaction;
							return;
						end
					end

			commit transaction

		select	@sp_rtn = 0, 
				@sp_msg = 'success';
		return;
	END TRY
	BEGIN CATCH
		if XACT_STATE() <> 0 rollback transaction;
		select	@sp_rtn = ERROR_NUMBER(), @sp_msg = ERROR_MESSAGE();
		exec dbo.sp_sys_error_log_create;
		return;
	END CATCH
GO
/****** Object:  StoredProcedure [dbo].[sp_character_nickname_update]    Script Date: 2024-09-08 오전 12:06:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE procedure [dbo].[sp_character_nickname_update]
(
	@uid bigint,
	@user_name nvarchar(40),
	@update_coins varchar(max),

	@sp_rtn int = 0 output, 
	@sp_msg varchar(128) = '' output
)
as
	SET XACT_ABORT ON
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
	SET NOCOUNT ON

	BEGIN TRY

		declare @utc_date datetime2 = sysutcdatetime();
		declare @curr_time bigint = (datediff(s, '1970-01-01', @utc_date));
		
		declare @is_exists bit = (case when exists (select * from dbo.tb_character where name = @user_name) then 1 else 0 end)

		if @is_exists = 1
		begin
			select	@sp_rtn = 1, 
					@sp_msg = 'duplicated name';
			return;
		end

		begin transaction

			update dbo.tb_character
			set name = @user_name ,dw_update_time = @utc_date
			where uid = @uid
			

			if LEN(@update_coins) > 0
			begin
				exec dbo.sp_json_update_coin_count
				@uid = @uid, @ref_json =　@update_coins,
				@sp_rtn = @sp_rtn out, @sp_msg = @sp_msg out

				if @sp_rtn <> 0
					begin
						if XACT_STATE() <> 0 rollback transaction;
						return;
					end
			end
			commit transaction;

		select	@sp_rtn = 0, 
				@sp_msg = 'success';
		return;
	END TRY
	BEGIN CATCH
		if XACT_STATE() <> 0 rollback transaction;
			select	@sp_rtn = ERROR_NUMBER(), @sp_msg = ERROR_MESSAGE();
			exec dbo.sp_sys_error_log_create;
		return;
	END CATCH
GO
/****** Object:  StoredProcedure [dbo].[sp_character_post_load]    Script Date: 2024-09-08 오전 12:06:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE procedure [dbo].[sp_character_post_load]
(
	@uid int = 0,
	@sp_rtn int = 0 output, 
	@sp_msg varchar(128) = '' output
)
as
	SET XACT_ABORT ON
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
	SET NOCOUNT ON

	BEGIN TRY
		declare @utc_date datetime2 = sysutcdatetime();
		declare @utc_time bigint = DATEDIFF(SECOND,{d '1970-01-01'}, @utc_date)

			--delete from dbo.tb_character_post
		--where uid = @uid and expire_time <= @login_time

		insert into dbo.tb_character_post
		( 
			uid, id, type, title, 
			msg, is_read, is_reward, begin_time, expire_time, 
			reward, dw_update_time
		)		
		select
		    @uid, sp.id, sp.type, sp.title, 
			sp.msg, 'FALSE', 'FALSE', sp.begin_time, sp.expire_time, 
		    sp.reward, sp.dw_update_time
		from dbo.tb_system_post as sp
		left outer join dbo.tb_character_post as cp
		on cp.id = sp.id and cp.type = sp.type and cp.uid = @uid
		where cp.id is null
		and sp.begin_time <= @utc_time
		and @utc_time < sp.expire_time;

		select id, type, title, msg, is_read, is_reward, begin_time, expire_time, reward
		from dbo.tb_character_post
		where uid = @uid

		select	@sp_rtn = 0, 
				@sp_msg = 'success';
		return;
	END TRY
	BEGIN CATCH
		if XACT_STATE() <> 0 rollback transaction;
		select	@sp_rtn = ERROR_NUMBER(), @sp_msg = ERROR_MESSAGE();
		exec dbo.sp_sys_error_log_create;
		return;
	END CATCH
GO
/****** Object:  StoredProcedure [dbo].[sp_character_post_read]    Script Date: 2024-09-08 오전 12:06:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE procedure [dbo].[sp_character_post_read]
(
	@uid int = 0,

	@read_posts nvarchar(max) = '',
	
	@sp_rtn int = 0 output, 
	@sp_msg varchar(128) = '' output
)
as
	SET XACT_ABORT ON
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
	SET NOCOUNT ON

	BEGIN TRY
		declare @utc_date datetime2 = sysutcdatetime();

		begin transaction

			update dbo.tb_character_post
			set is_read = 1, dw_update_time = @utc_date
			where uid = @uid and id in ( select value from openjson (@read_posts));
			
			--if LEN(@update_items) > 0
			--begin
			--	exec dbo.sp_json_update_item_count
			--	@uid = @uid, @ref_json = @update_items,
			--	@sp_rtn = @sp_rtn out , @sp_msg = @sp_msg out

			--	if @sp_rtn <> 0 
			--		begin 
			--			if XACT_STATE() <> 0 rollback transaction;
			--			return;
			--		end
			--end
			
			--if LEN(@update_coins) > 0
			--begin
			--	exec dbo.sp_json_update_coin_count
			--	@uid = @uid, @ref_json =@update_coins,
			--	@sp_rtn = @sp_rtn out, @sp_msg = @sp_msg out

			--	if @sp_rtn <> 0
			--		begin
			--			if XACT_STATE() <> 0 rollback transaction;
			--			return;
			--		end
			--end

		commit transaction

		select	@sp_rtn = 0, 
				@sp_msg = 'success';
		return;
	END TRY
	BEGIN CATCH
		if XACT_STATE() <> 0 rollback transaction;
		select	@sp_rtn = ERROR_NUMBER(), @sp_msg = ERROR_MESSAGE();
		exec dbo.sp_sys_error_log_create;
		return;
	END CATCH
GO
/****** Object:  StoredProcedure [dbo].[sp_character_post_remove]    Script Date: 2024-09-08 오전 12:06:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


create procedure [dbo].[sp_character_post_remove]
(
	@uid int = 0,

	@remove_posts nvarchar(max) = '',
	
	@sp_rtn int = 0 output, 
	@sp_msg varchar(128) = '' output
)
as
	SET XACT_ABORT ON
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
	SET NOCOUNT ON

	BEGIN TRY
		declare @utc_date datetime2 = sysutcdatetime();

		begin transaction
			
			delete from dbo.tb_character_post
			where uid = @uid and id in (select value from openjson(@remove_posts));

		commit transaction

		select	@sp_rtn = 0, 
				@sp_msg = 'success';
		return;
	END TRY
	BEGIN CATCH
		if XACT_STATE() <> 0 rollback transaction;
		select	@sp_rtn = ERROR_NUMBER(), @sp_msg = ERROR_MESSAGE();
		exec dbo.sp_sys_error_log_create;
		return;
	END CATCH
GO
/****** Object:  StoredProcedure [dbo].[sp_character_post_reward]    Script Date: 2024-09-08 오전 12:06:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE procedure [dbo].[sp_character_post_reward]
(
	@uid int = 0,

	@read_posts nvarchar(max) = '',
	@update_items nvarchar(max) = '',
	@update_coins nvarchar(max) = '',
	
	@sp_rtn int = 0 output, 
	@sp_msg varchar(128) = '' output
)
as
	SET XACT_ABORT ON
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
	SET NOCOUNT ON

	BEGIN TRY
		declare @utc_date datetime2 = sysutcdatetime();

		begin transaction

			update dbo.tb_character_post
			set is_reward = 1, is_read = 1, dw_update_time = @utc_date
			where uid = @uid and id in ( select value from openjson (@read_posts));
			
			if LEN(@update_items) > 0
			begin
				exec dbo.sp_json_update_item_count
				@uid = @uid, @ref_json = @update_items,
				@sp_rtn = @sp_rtn out , @sp_msg = @sp_msg out

				if @sp_rtn <> 0 
					begin 
						if XACT_STATE() <> 0 rollback transaction;
						return;
					end
			end
			
			if LEN(@update_coins) > 0
			begin
				exec dbo.sp_json_update_coin_count
				@uid = @uid, @ref_json =@update_coins,
				@sp_rtn = @sp_rtn out, @sp_msg = @sp_msg out

				if @sp_rtn <> 0
					begin
						if XACT_STATE() <> 0 rollback transaction;
						return;
					end
			end

		commit transaction

		select	@sp_rtn = 0, 
				@sp_msg = 'success';
		return;
	END TRY
	BEGIN CATCH
		if XACT_STATE() <> 0 rollback transaction;
		select	@sp_rtn = ERROR_NUMBER(), @sp_msg = ERROR_MESSAGE();
		exec dbo.sp_sys_error_log_create;
		return;
	END CATCH
GO
/****** Object:  StoredProcedure [dbo].[sp_character_pref_update]    Script Date: 2024-09-08 오전 12:06:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE procedure [dbo].[sp_character_pref_update]
(
	@uid int = 0,
	@type tinyint = 0,
	@strval nvarchar(1024) = '',
	@sp_rtn int = 0 output, 
	@sp_msg varchar(128) = '' output
)
as
	SET XACT_ABORT ON
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
	SET NOCOUNT ON

	BEGIN TRY
		declare @utc_date datetime2 = sysutcdatetime();

		begin transaction

			merge dbo.tb_character_pref as t_cs
				using ( select @uid as uid ) as s_cs
				on t_cs.uid = s_cs.uid and t_cs.type = @type
				when matched then
					update set	strval = @strval,
								dw_update_time = @utc_date
				when not matched by target then
					insert (uid, type, [strVal], dw_update_time)
					values (@uid, @type, @strval, @utc_date);

		commit transaction

		select	@sp_rtn = 0, 
				@sp_msg = 'success';
		return;
	END TRY
	BEGIN CATCH
		if XACT_STATE() <> 0 rollback transaction;
		select	@sp_rtn = ERROR_NUMBER(), @sp_msg = ERROR_MESSAGE();
		exec dbo.sp_sys_error_log_create;
		return;
	END CATCH
GO
/****** Object:  StoredProcedure [dbo].[sp_character_quest_checkIn_rewarded]    Script Date: 2024-09-08 오전 12:06:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE procedure [dbo].[sp_character_quest_checkIn_rewarded]
(
	@db_uid int = 0,
	@db_quest_id varchar(max) = '',
	@db_mission_id int = 0,
	@db_mission_idx int = 0,
	@db_mission_val bigint = 0,
	@db_mission_state tinyint = 0,
	@db_exp_time datetime2(0),

	@db_update_coin nvarchar(max) = '',
	@db_update_item nvarchar(max) = '',
	@sp_rtn int = 0 output, 
	@sp_msg varchar(128) = '' output
)
as
	SET XACT_ABORT ON
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
	SET NOCOUNT ON

	BEGIN TRY

	declare @utc_date datetime2 = sysutcdatetime();

	begin transaction

		exec dbo.sp_character_quest_checkIn_update
		@db_uid = @db_uid, @db_quest_id = @db_quest_id, @db_mission_id = @db_mission_id,
		@db_mission_idx = @db_mission_idx, @db_mission_val = @db_mission_val,
		@db_mission_state = @db_mission_state, @db_exp_time = @db_exp_time,
		@sp_rtn = @sp_rtn out, @sp_msg = @sp_msg out

		if @sp_rtn <> 0 
		begin 
			if XACT_STATE() <> 0 rollback transaction;
			return;
		end
			
		--update coin
		if LEN(@db_update_coin) > 0
		begin 
			exec dbo.sp_json_update_coin_count
				@uid = @db_uid, @ref_json = @db_update_coin,
				@sp_rtn = @sp_rtn out, @sp_msg = @sp_msg out;

			if @sp_rtn <> 0 
			begin 
				if XACT_STATE() <> 0 rollback transaction;
				return;
			end
		end

		--update item
		if LEN(@db_update_item) > 0
		begin
			exec dbo.sp_json_update_item_count
				@uid = @db_uid, @ref_json = @db_update_item,
				@sp_rtn = @sp_rtn out, @sp_msg = @sp_msg out;

			if @sp_rtn <> 0 
			begin 
				if XACT_STATE() <> 0 rollback transaction;
				return;
			end
		end

	commit transaction
	select	@sp_rtn = 0, 
			@sp_msg = 'success';
		return;
	END TRY
	BEGIN CATCH
		if XACT_STATE() <> 0 rollback transaction;
		select	@sp_rtn = ERROR_NUMBER(), @sp_msg = ERROR_MESSAGE();
		exec dbo.sp_sys_error_log_create;
		return;
	END CATCH
GO
/****** Object:  StoredProcedure [dbo].[sp_character_quest_checkIn_update]    Script Date: 2024-09-08 오전 12:06:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE procedure [dbo].[sp_character_quest_checkIn_update]
(
	@db_uid int = 0,
	@db_quest_id varchar(max) = '',
	@db_mission_id int = 0,
	@db_mission_idx int = 0,
	@db_mission_val bigint = 0,
	@db_mission_state tinyint = 0,
	@db_exp_time datetime2(0),

	@sp_rtn int = 0 output, 
	@sp_msg varchar(128) = '' output
)
as
	SET XACT_ABORT ON
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
	SET NOCOUNT ON

	BEGIN TRY

	declare @utc_date datetime2 = sysutcdatetime();

	begin transaction

		merge dbo.tb_character_quest_checkin as t_cqc
		using ( select @db_uid as uid ) as s_cqc
		on t_cqc.uid = s_cqc.uid and t_cqc.quest_id = @db_quest_id
		when matched then
			update set	id = @db_mission_id,
						idx = @db_mission_idx,
						val = @db_mission_val,
						state = @db_mission_state,
						exp_time = @db_exp_time,
						dw_update_time = @utc_date
		when not matched by target then
			insert (uid, quest_id, id, idx, val, state, exp_time ,dw_update_time)
			values (@db_uid, @db_quest_id, @db_mission_id, @db_mission_idx, @db_mission_val, @db_mission_state, @db_exp_time, @utc_date);

	commit transaction
	select	@sp_rtn = 0, 
			@sp_msg = 'success';
		return;
	END TRY
	BEGIN CATCH
		if XACT_STATE() <> 0 rollback transaction;
		select	@sp_rtn = ERROR_NUMBER(), @sp_msg = ERROR_MESSAGE();
		exec dbo.sp_sys_error_log_create;
		return;
	END CATCH
GO
/****** Object:  StoredProcedure [dbo].[sp_character_quest_daily_rewarded]    Script Date: 2024-09-08 오전 12:06:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE procedure [dbo].[sp_character_quest_daily_rewarded]
(
	@db_uid int = 0,
	@db_mission_json nvarchar(max) = '',
	@db_exp_time datetime2(0),

	@update_coin nvarchar(max) = '',
	@update_item nvarchar(max) = '',
	@sp_rtn int = 0 output, 
	@sp_msg varchar(128) = '' output
)
as
	SET XACT_ABORT ON
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
	SET NOCOUNT ON

	BEGIN TRY

		declare @utc_date datetime2 = sysutcdatetime();

			begin transaction

			merge dbo.tb_character_quest_daily as t_cqd
			using 
			(
				select ID, Idx, Val, State
				from openjson(@db_mission_json) with
					(
						ID int, Idx int, Val bigint, State tinyint
					)
			) as s_cqr(ID, Idx, Val, State) 
			on t_cqd.uid = @db_uid and
				t_cqd.id = s_cqr.ID
			when matched then
				update set	t_cqd.idx = s_cqr.idx,
							t_cqd.val = s_cqr.Val,
							t_cqd.state = s_cqr.State,
							dw_update_time = @utc_date
			when not matched by target then
				insert (uid, id, idx, val, state, exp_time, dw_update_time)
				values (@db_uid, s_cqr.ID, s_cqr.Idx, s_cqr.Val, s_cqr.State, @db_exp_time, @utc_date);

			--update coin
			if LEN(@update_coin) > 0
				begin 
					exec dbo.sp_json_update_coin_count
						@uid = @db_uid, @ref_json = @update_coin,
						@sp_rtn = @sp_rtn out, @sp_msg = @sp_msg out;

					if @sp_rtn <> 0 
					begin 
						if XACT_STATE() <> 0 rollback transaction;
						return;
					end
				end

			--update item
			if LEN(@update_item) > 0
				begin
					exec dbo.sp_json_update_item_count
						@uid = @db_uid, @ref_json = @update_item,
						@sp_rtn = @sp_rtn out, @sp_msg = @sp_msg out;

					if @sp_rtn <> 0 
					begin 
						if XACT_STATE() <> 0 rollback transaction;
						return;
					end
				end

				commit transaction;
		select	@sp_rtn = 0, 
				@sp_msg = 'success';
		return;
	END TRY
	BEGIN CATCH
		if XACT_STATE() <> 0 rollback transaction;
		select	@sp_rtn = ERROR_NUMBER(), @sp_msg = ERROR_MESSAGE();
		exec dbo.sp_sys_error_log_create;
		return;
	END CATCH
GO
/****** Object:  StoredProcedure [dbo].[sp_character_quest_daily_update]    Script Date: 2024-09-08 오전 12:06:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE procedure [dbo].[sp_character_quest_daily_update]
(
	@db_uid int = 0,
	@db_mission_json varchar(max) = '',
	@db_exp_time datetime2(0) = '',

	@sp_rtn int = 0 output, 
	@sp_msg varchar(128) = '' output
)
as
	SET XACT_ABORT ON
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
	SET NOCOUNT ON

	BEGIN TRY
		declare @utc_date datetime2 = sysutcdatetime();
		begin transaction
		merge dbo.tb_character_quest_daily as t_cqd
			using 
			(
				select ID, Idx, Val, State
				from openjson(@db_mission_json) with
					(
						ID int, Idx int, Val bigint, State tinyint
					)
			) as s_cqr(ID, Idx, Val, State) 
			on t_cqd.uid = @db_uid and
				t_cqd.id = s_cqr.ID
			when matched then
				update set	t_cqd.idx = s_cqr.idx,
							t_cqd.val = s_cqr.Val,
							t_cqd.state = s_cqr.State,
							t_cqd.exp_time = @db_exp_time,
							dw_update_time = @utc_date
			when not matched by target then
				insert (uid, id, idx, val, state, exp_time, dw_update_time)
				values (@db_uid, s_cqr.ID, s_cqr.Idx, s_cqr.Val, s_cqr.State, @db_exp_time, @utc_date);

		commit transaction 
		
		select	@sp_rtn = 0, 
				@sp_msg = 'success';
		return;
	END TRY
	BEGIN CATCH
		if XACT_STATE() <> 0 rollback transaction;
		select	@sp_rtn = ERROR_NUMBER(), @sp_msg = ERROR_MESSAGE();
		exec dbo.sp_sys_error_log_create;
		return;
	END CATCH
GO
/****** Object:  StoredProcedure [dbo].[sp_character_quest_event_rewarded]    Script Date: 2024-09-08 오전 12:06:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE procedure [dbo].[sp_character_quest_event_rewarded]
(
	@db_uid int = 0,
	@db_mission_json nvarchar(max) = '',
	@db_exp_time datetime2(0),
	@db_quest_id nvarchar(max) = '',

	@update_coin nvarchar(max) = '',
	@update_item nvarchar(max) = '',
	@sp_rtn int = 0 output, 
	@sp_msg varchar(128) = '' output
)
as
	SET XACT_ABORT ON
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
	SET NOCOUNT ON

	BEGIN TRY

		declare @utc_date datetime2 = sysutcdatetime();

			begin transaction

			exec dbo.sp_character_quest_event_update
			@db_uid = @db_uid, @db_mission_json = @db_mission_json,
			@db_quest_id = @db_quest_id, @db_exp_time = @db_exp_time,
			@sp_rtn = @sp_rtn out, @sp_msg = @sp_msg out

			--update coin
			if LEN(@update_coin) > 0
				begin 
					exec dbo.sp_json_update_coin_count
						@uid = @db_uid, @ref_json = @update_coin,
						@sp_rtn = @sp_rtn out, @sp_msg = @sp_msg out;

					if @sp_rtn <> 0 
					begin 
						if XACT_STATE() <> 0 rollback transaction;
						return;
					end
				end

			--update item
			if LEN(@update_item) > 0
				begin
					exec dbo.sp_json_update_item_count
						@uid = @db_uid, @ref_json = @update_item,
						@sp_rtn = @sp_rtn out, @sp_msg = @sp_msg out;

					if @sp_rtn <> 0 
					begin 
						if XACT_STATE() <> 0 rollback transaction;
						return;
					end
				end

				commit transaction;
		select	@sp_rtn = 0, 
				@sp_msg = 'success';
		return;
	END TRY
	BEGIN CATCH
		if XACT_STATE() <> 0 rollback transaction;
		select	@sp_rtn = ERROR_NUMBER(), @sp_msg = ERROR_MESSAGE();
		exec dbo.sp_sys_error_log_create;
		return;
	END CATCH
GO
/****** Object:  StoredProcedure [dbo].[sp_character_quest_event_update]    Script Date: 2024-09-08 오전 12:06:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE procedure [dbo].[sp_character_quest_event_update]
(
	@db_uid int = 0,
	@db_mission_json nvarchar(max) = '',
	@db_quest_id nvarchar(max) = '',
	@db_exp_time DateTime2(0) = sysutcdatetime,

	@sp_rtn int = 0 output, 
	@sp_msg varchar(128) = '' output
)
as
	SET XACT_ABORT ON
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
	SET NOCOUNT ON

	BEGIN TRY

		declare @utc_date datetime2 = sysutcdatetime();

			begin transaction

			merge dbo.tb_character_quest_event as t_cqe
			using 
			(
				select ID, Idx, Val, State
				from openjson(@db_mission_json) with
					(
						ID int, Idx int, Val bigint, State tinyint
					)
			) as s_cqp(ID, Idx, Val, State) 
			on t_cqe.uid = @db_uid and
				t_cqe.id = s_cqp.ID and
				t_cqe.quest_id = @db_quest_id
			when matched then
				update set	t_cqe.idx = s_cqp.idx,
							t_cqe.val = s_cqp.Val,
							t_cqe.state = s_cqp.State,
							t_cqe.exp_time = @db_exp_time,
							t_cqe.dw_update_time = @utc_date
			when not matched by target then
				insert (uid, id, quest_id, idx, val, state, exp_time, dw_update_time)
				values (@db_uid, s_cqp.ID, @db_quest_id, s_cqp.Idx, s_cqp.Val, s_cqp.State, @db_exp_time, @utc_date);

				commit transaction
		select	@sp_rtn = 0, 
				@sp_msg = 'success';
		return;
	END TRY
	BEGIN CATCH
		if XACT_STATE() <> 0 rollback transaction;
		select	@sp_rtn = ERROR_NUMBER(), @sp_msg = ERROR_MESSAGE();
		exec dbo.sp_sys_error_log_create;
		return;
	END CATCH
GO
/****** Object:  StoredProcedure [dbo].[sp_character_quest_main_rewarded]    Script Date: 2024-09-08 오전 12:06:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE procedure [dbo].[sp_character_quest_main_rewarded]
(
	@uid int = 0,
	@remove_mission_id int = 0,
	@mission_id int = 0,
	@mission_idx int = 0,
	@mission_val bigint = 0,
	@mission_state tinyint = 0,
	@update_coin nvarchar(max) = '',
	@update_item nvarchar(max) = '',
	@sp_rtn int = 0 output, 
	@sp_msg varchar(128) = '' output
)
as
	SET XACT_ABORT ON
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
	SET NOCOUNT ON

	BEGIN TRY

		declare @utc_date datetime2 = sysutcdatetime();

			begin transaction

				update dbo.tb_character_quest_main
				set id = @mission_id, idx = @mission_idx, val = @mission_val,
				state = @mission_state, dw_update_time = @utc_date
				where uid = @uid and id = @remove_mission_id

				--update coin
				if LEN(@update_coin) > 0
					begin 
						exec dbo.sp_json_update_coin_count
							@uid = @uid, @ref_json = @update_coin,
							@sp_rtn = @sp_rtn out, @sp_msg = @sp_msg out;

						if @sp_rtn <> 0 
						begin 
							if XACT_STATE() <> 0 rollback transaction;
							return;
						end
					end

				--update item
				if LEN(@update_item) > 0
					begin
						exec dbo.sp_json_update_item_count
							@uid = @uid, @ref_json = @update_item,
							@sp_rtn = @sp_rtn out, @sp_msg = @sp_msg out;

						if @sp_rtn <> 0 
						begin 
							if XACT_STATE() <> 0 rollback transaction;
							return;
						end
					end

				commit transaction
		select	@sp_rtn = 0, 
				@sp_msg = 'success';
		return;
	END TRY
	BEGIN CATCH
		if XACT_STATE() <> 0 rollback transaction;
		select	@sp_rtn = ERROR_NUMBER(), @sp_msg = ERROR_MESSAGE();
		exec dbo.sp_sys_error_log_create;
		return;
	END CATCH
GO
/****** Object:  StoredProcedure [dbo].[sp_character_quest_main_update]    Script Date: 2024-09-08 오전 12:06:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE procedure [dbo].[sp_character_quest_main_update]
(
	@db_uid int = 0,
	@db_mission_id int = 0,
	@db_mission_idx int = 0,
	@db_mission_val bigint = 0,
	@db_mission_state tinyint = 0,
	
	@sp_rtn int = 0 output, 
	@sp_msg varchar(128) = '' output
)
as
	SET XACT_ABORT ON
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
	SET NOCOUNT ON

	BEGIN TRY
		declare @utc_date datetime2 = sysutcdatetime();
			
			begin transaction
				merge dbo.tb_character_quest_main as t_cm
					using ( select @db_uid as uid ) as s_cm
					on t_cm.uid = s_cm.uid and t_cm.id = @db_mission_id
					when matched then
						update set	idx = @db_mission_idx,
									val = @db_mission_val,
									state = @db_mission_state,
									dw_update_time = @utc_date
					when not matched by target then
						insert (uid, id, idx, val, state, dw_update_time)
						values (@db_uid, @db_mission_id, @db_mission_idx, @db_mission_val, @db_mission_state, @utc_date);

			commit transaction
		
		select	@sp_rtn = 0, 
				@sp_msg = 'success';
		return;
	END TRY
	BEGIN CATCH
		if XACT_STATE() <> 0 rollback transaction;
		select	@sp_rtn = ERROR_NUMBER(), @sp_msg = ERROR_MESSAGE();
		exec dbo.sp_sys_error_log_create;
		return;
	END CATCH
GO
/****** Object:  StoredProcedure [dbo].[sp_character_quest_pass_rewarded]    Script Date: 2024-09-08 오전 12:06:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE procedure [dbo].[sp_character_quest_pass_rewarded]
(
	@db_uid int = 0,
	@db_mission_json nvarchar(max) = '',
	@db_quest_id varchar(max) = '',
	@db_pass_active bit = FALSE,

	@update_coin nvarchar(max) = '',
	@update_item nvarchar(max) = '',
	@sp_rtn int = 0 output, 
	@sp_msg varchar(128) = '' output
)
as
	SET XACT_ABORT ON
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
	SET NOCOUNT ON

	BEGIN TRY

		declare @utc_date datetime2 = sysutcdatetime();

			begin transaction

			exec dbo.sp_character_quest_pass_update
			@db_uid = @db_uid, @db_mission_json = @db_mission_json,
			@db_quest_id = @db_quest_id, @db_pass_active = @db_pass_active,
			@sp_rtn = @sp_rtn out, @sp_msg = @sp_msg out
			
			if @sp_rtn <> 0 
			begin 
				if XACT_STATE() <> 0 rollback transaction;
				return;
			end

			--update coin
			if LEN(@update_coin) > 0
				begin 
					exec dbo.sp_json_update_coin_count
						@uid = @db_uid, @ref_json = @update_coin,
						@sp_rtn = @sp_rtn out, @sp_msg = @sp_msg out;

					if @sp_rtn <> 0 
					begin 
						if XACT_STATE() <> 0 rollback transaction;
						return;
					end
				end

			--update item
			if LEN(@update_item) > 0
				begin
					exec dbo.sp_json_update_item_count
						@uid = @db_uid, @ref_json = @update_item,
						@sp_rtn = @sp_rtn out, @sp_msg = @sp_msg out;

					if @sp_rtn <> 0 
					begin 
						if XACT_STATE() <> 0 rollback transaction;
						return;
					end
				end

				commit transaction
		select	@sp_rtn = 0, 
				@sp_msg = 'success';
		return;
	END TRY
	BEGIN CATCH
		if XACT_STATE() <> 0 rollback transaction;
		select	@sp_rtn = ERROR_NUMBER(), @sp_msg = ERROR_MESSAGE();
		exec dbo.sp_sys_error_log_create;
		return;
	END CATCH
GO
/****** Object:  StoredProcedure [dbo].[sp_character_quest_pass_update]    Script Date: 2024-09-08 오전 12:06:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE procedure [dbo].[sp_character_quest_pass_update]
(
	@db_uid int = 0,
	@db_mission_json nvarchar(max) = '',
	@db_quest_id varchar(max) = '',
	@db_pass_active bit,

	@sp_rtn int = 0 output, 
	@sp_msg varchar(128) = '' output
)
as
	SET XACT_ABORT ON
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
	SET NOCOUNT ON

	BEGIN TRY

		declare @utc_date datetime2 = sysutcdatetime();

			begin transaction

			merge dbo.tb_character_quest_pass as t_cqp
			using 
			(
				select ID, Idx, Val, State, PassRewarded
				from openjson(@db_mission_json) with
					(
						ID int, Idx int, Val bigint, State tinyint, PassRewarded bit
					)
			) as s_cqp(ID, Idx, Val, State, PassRewarded) 
			on t_cqp.uid = @db_uid and
				t_cqp.id = s_cqp.ID and
				t_cqp.quest_id = @db_quest_id
			when matched then
				update set	t_cqp.idx = s_cqp.idx,
							t_cqp.val = s_cqp.Val,
							t_cqp.state = s_cqp.State,
							t_cqp.pass_rewarded = s_cqp.PassRewarded,
							t_cqp.pass_active = @db_pass_active,
							dw_update_time = @utc_date
			when not matched by target then
				insert (uid, quest_id, id, idx, val, state, pass_rewarded, pass_active, dw_update_time)
				values (@db_uid, @db_quest_id, s_cqp.ID, s_cqp.Idx, s_cqp.Val, s_cqp.State, s_cqp.PassRewarded, @db_pass_active, @utc_date);

				commit transaction
		select	@sp_rtn = 0, 
				@sp_msg = 'success';
		return;
	END TRY
	BEGIN CATCH
		if XACT_STATE() <> 0 rollback transaction;
		select	@sp_rtn = ERROR_NUMBER(), @sp_msg = ERROR_MESSAGE();
		exec dbo.sp_sys_error_log_create;
		return;
	END CATCH
GO
/****** Object:  StoredProcedure [dbo].[sp_character_quest_repeat_rewarded]    Script Date: 2024-09-08 오전 12:06:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE procedure [dbo].[sp_character_quest_repeat_rewarded]
(
	@db_uid int = 0,
	@db_mission_json nvarchar(max) = '',

	@update_coin nvarchar(max) = '',
	@update_item nvarchar(max) = '',
	@sp_rtn int = 0 output, 
	@sp_msg varchar(128) = '' output
)
as
	SET XACT_ABORT ON
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
	SET NOCOUNT ON

	BEGIN TRY

		declare @utc_date datetime2 = sysutcdatetime();

			begin transaction

			merge dbo.tb_character_quest_repeat as t_cqr
			using 
			(
				select ID, Idx, Val, State, PassRewarded
				from openjson(@db_mission_json) with
					(
						ID int, Idx int, Val bigint, State tinyint, PassRewarded bit
					)
			) as s_cqr(ID, Idx, Val, State, PassRewarded) 
			on t_cqr.uid = @db_uid and
				t_cqr.id = s_cqr.ID
			when matched then
				update set	t_cqr.idx = s_cqr.idx,
							t_cqr.val = s_cqr.Val,
							t_cqr.state = s_cqr.State,
							t_cqr.pass_rewarded = s_cqr.PassRewarded,
							dw_update_time = @utc_date
			when not matched by target then
				insert (uid, id, idx, val, state, pass_rewarded, dw_update_time)
				values (@db_uid, s_cqr.ID, s_cqr.Idx, s_cqr.Val, s_cqr.State, s_cqr.PassRewarded, @utc_date);

			--update coin
			if LEN(@update_coin) > 0
				begin 
					exec dbo.sp_json_update_coin_count
						@uid = @db_uid, @ref_json = @update_coin,
						@sp_rtn = @sp_rtn out, @sp_msg = @sp_msg out;

					if @sp_rtn <> 0 
					begin 
						if XACT_STATE() <> 0 rollback transaction;
						return;
					end
				end

			--update item
			if LEN(@update_item) > 0
				begin
					exec dbo.sp_json_update_item_count
						@uid = @db_uid, @ref_json = @update_item,
						@sp_rtn = @sp_rtn out, @sp_msg = @sp_msg out;

					if @sp_rtn <> 0 
					begin 
						if XACT_STATE() <> 0 rollback transaction;
						return;
					end
				end

				commit transaction
		select	@sp_rtn = 0, 
				@sp_msg = 'success';
		return;
	END TRY
	BEGIN CATCH
		if XACT_STATE() <> 0 rollback transaction;
		select	@sp_rtn = ERROR_NUMBER(), @sp_msg = ERROR_MESSAGE();
		exec dbo.sp_sys_error_log_create;
		return;
	END CATCH
GO
/****** Object:  StoredProcedure [dbo].[sp_character_quest_repeat_update]    Script Date: 2024-09-08 오전 12:06:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE procedure [dbo].[sp_character_quest_repeat_update]
(
	@db_uid int = 0,
	@db_mission_json varchar(max) = '',

	@sp_rtn int = 0 output, 
	@sp_msg varchar(128) = '' output
)
as
	SET XACT_ABORT ON
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
	SET NOCOUNT ON

	BEGIN TRY
		declare @utc_date datetime2 = sysutcdatetime();
		begin transaction
		merge dbo.tb_character_quest_repeat as t_cqr
			using 
			(
				select ID, Idx, Val, State, PassRewarded
				from openjson(@db_mission_json) with
					(
						ID int, Idx int, Val bigint, State tinyint, PassRewarded bit
					)
			) as s_cqr(ID, Idx, Val, State, PassRewarded) 
			on t_cqr.uid = @db_uid and
				t_cqr.id = s_cqr.ID
			when matched then
				update set	t_cqr.idx = s_cqr.idx,
							t_cqr.val = s_cqr.Val,
							t_cqr.state = s_cqr.State,
							t_cqr.pass_rewarded = s_cqr.PassRewarded,
							dw_update_time = @utc_date
			when not matched by target then
				insert (uid, id, idx, val, state, pass_rewarded,dw_update_time)
				values (@db_uid, s_cqr.ID, s_cqr.Idx, s_cqr.Val, s_cqr.State, s_cqr.PassRewarded, @utc_date);

		commit transaction 
		
		select	@sp_rtn = 0, 
				@sp_msg = 'success';
		return;
	END TRY
	BEGIN CATCH
		if XACT_STATE() <> 0 rollback transaction;
		select	@sp_rtn = ERROR_NUMBER(), @sp_msg = ERROR_MESSAGE();
		exec dbo.sp_sys_error_log_create;
		return;
	END CATCH
GO
/****** Object:  StoredProcedure [dbo].[sp_character_rank_reward_rewarded]    Script Date: 2024-09-08 오전 12:06:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


create procedure [dbo].[sp_character_rank_reward_rewarded]
(
	@uid int = 0,

	@update_items nvarchar(max) = '',
	@update_coins nvarchar(max) = '',

	@rank_type tinyint = 0,
	@reward_state tinyint =0,
	@rank_val int = 0,
	@exp_time bigint = 0,
	@sp_rtn int = 0 output, 
	@sp_msg varchar(128) = '' output
)
as
	SET XACT_ABORT ON
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
	SET NOCOUNT ON

	BEGIN TRY
		declare @utc_date datetime2 = sysutcdatetime();

		begin transaction
		merge dbo.tb_character_rank_reward as t_crr
				using ( select @uid as uid ) as s_crr
				on t_crr.uid = s_crr.uid and t_crr.type = @rank_type
				when matched then
					update set	state = @reward_state,
								val = @rank_val,
								exp_time = @exp_time,
								dw_update_time = @utc_date
				when not matched by target then
					insert (uid, type, state, val, exp_time, dw_update_time)
					values (@uid, @rank_type, @reward_state, @rank_val, @exp_time, @utc_date);

			

			--item update
			if LEN(@update_items) > 0
			begin
				exec dbo.sp_json_update_item_count
				@uid = @uid, @ref_json = @update_items,
				@sp_rtn = @sp_rtn out , @sp_msg = @sp_msg out

				if @sp_rtn <> 0 
					begin 
						if XACT_STATE() <> 0 rollback transaction;
						return;
					end
			end
			
			--coin update
			if LEN(@update_coins) > 0
			begin
				exec dbo.sp_json_update_coin_count
				@uid = @uid, @ref_json =@update_coins,
				@sp_rtn = @sp_rtn out, @sp_msg = @sp_msg out

				if @sp_rtn <> 0
					begin
						if XACT_STATE() <> 0 rollback transaction;
						return;
					end
			end

		commit transaction 

		select	@sp_rtn = 0, 
				@sp_msg = 'success';
		return;
	END TRY
	BEGIN CATCH
		if XACT_STATE() <> 0 rollback transaction;
		select	@sp_rtn = ERROR_NUMBER(), @sp_msg = ERROR_MESSAGE();
		exec dbo.sp_sys_error_log_create;
		return;
	END CATCH
GO
/****** Object:  StoredProcedure [dbo].[sp_character_rank_reward_update]    Script Date: 2024-09-08 오전 12:06:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE procedure [dbo].[sp_character_rank_reward_update]
(
	@uid int = 0,
	@rank_type tinyint = 0,
	@reward_state tinyint =0,
	@rank_val int = 0,
	@exp_time bigint = 0,

	@sp_rtn int = 0 output, 
	@sp_msg varchar(128) = '' output
)
as
	SET XACT_ABORT ON
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
	SET NOCOUNT ON

	BEGIN TRY
		declare @utc_date datetime2 = sysutcdatetime();

		begin transaction
		merge dbo.tb_character_rank_reward as t_crr
				using ( select @uid as uid ) as s_crr
				on t_crr.uid = s_crr.uid and t_crr.type = @rank_type
				when matched then
					update set	state = @reward_state,
								val = @rank_val,
								exp_time = @exp_time,
								dw_update_time = @utc_date
				when not matched by target then
					insert (uid, type, state, val, exp_time, dw_update_time)
					values (@uid, @rank_type, @reward_state, @rank_val, @exp_time, @utc_date);

		commit transaction 

		select	@sp_rtn = 0, 
				@sp_msg = 'success';
		return;
	END TRY
	BEGIN CATCH
		if XACT_STATE() <> 0 rollback transaction;
		select	@sp_rtn = ERROR_NUMBER(), @sp_msg = ERROR_MESSAGE();
		exec dbo.sp_sys_error_log_create;
		return;
	END CATCH
GO
/****** Object:  StoredProcedure [dbo].[sp_character_rank_rewared]    Script Date: 2024-09-08 오전 12:06:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


create procedure [dbo].[sp_character_rank_rewared]
(
	@uid int = 0,

	@update_items nvarchar(max) = '',
	@update_coins nvarchar(max) = '',

	@rank_type tinyint = 0,
	@reward_state tinyint =0,
	@rank_val int = 0,
	@exp_time bigint = 0,
	@sp_rtn int = 0 output, 
	@sp_msg varchar(128) = '' output
)
as
	SET XACT_ABORT ON
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
	SET NOCOUNT ON

	BEGIN TRY
		declare @utc_date datetime2 = sysutcdatetime();

		begin transaction
		merge dbo.tb_character_rank_reward as t_crr
				using ( select @uid as uid ) as s_crr
				on t_crr.uid = s_crr.uid and t_crr.type = @rank_type
				when matched then
					update set	state = @reward_state,
								val = @rank_val,
								exp_time = @exp_time,
								dw_update_time = @utc_date
				when not matched by target then
					insert (uid, type, state, val, exp_time, dw_update_time)
					values (@uid, @rank_type, @reward_state, @rank_val, @exp_time, @utc_date);

			

			--item update
			if LEN(@update_items) > 0
			begin
				exec dbo.sp_json_update_item_count
				@uid = @uid, @ref_json = @update_items,
				@sp_rtn = @sp_rtn out , @sp_msg = @sp_msg out

				if @sp_rtn <> 0 
					begin 
						if XACT_STATE() <> 0 rollback transaction;
						return;
					end
			end
			
			--coin update
			if LEN(@update_coins) > 0
			begin
				exec dbo.sp_json_update_coin_count
				@uid = @uid, @ref_json =@update_coins,
				@sp_rtn = @sp_rtn out, @sp_msg = @sp_msg out

				if @sp_rtn <> 0
					begin
						if XACT_STATE() <> 0 rollback transaction;
						return;
					end
			end

		commit transaction 

		select	@sp_rtn = 0, 
				@sp_msg = 'success';
		return;
	END TRY
	BEGIN CATCH
		if XACT_STATE() <> 0 rollback transaction;
		select	@sp_rtn = ERROR_NUMBER(), @sp_msg = ERROR_MESSAGE();
		exec dbo.sp_sys_error_log_create;
		return;
	END CATCH
GO
/****** Object:  StoredProcedure [dbo].[sp_character_relic_enchant]    Script Date: 2024-09-08 오전 12:06:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO





CREATE procedure [dbo].[sp_character_relic_enchant]
(
	@uid int = 0,
	@group_id int = 0,
	@lv int = 0,
	@bonus_prob int = 0,

	@update_items varchar(max) = '',
	@update_coins varchar(max) = '',
	@sp_rtn int = 0 output, 
	@sp_msg varchar(128) = '' output
)
as
	SET XACT_ABORT ON
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
	SET NOCOUNT ON

	BEGIN TRY
		declare @utc_date datetime2 = sysutcdatetime();

		begin transaction

			merge dbo.tb_character_relic as t_cr
				using ( select @uid as uid ) as s_cs
				on t_cr.uid = s_cs.uid and t_cr.group_id = @group_id 
				when matched then
					update set	lv = @lv,
								bonus_prob = @bonus_prob,
								dw_update_time = @utc_date
				when not matched by target then
					insert (uid, group_id, lv, bonus_prob, dw_update_time)
					values (@uid, @group_id, @lv, @bonus_prob, @utc_date);

					--update coin
			if LEN(@update_coins) > 0
				begin 
					exec dbo.sp_json_update_coin_count
						@uid = @uid, @ref_json = @update_coins,
						@sp_rtn = @sp_rtn out, @sp_msg = @sp_msg out;

					if @sp_rtn <> 0 
					begin 
						if XACT_STATE() <> 0 rollback transaction;
						return;
					end
				end

			--update item
			if LEN(@update_items) > 0
				begin
					exec dbo.sp_json_update_item_count
						@uid = @uid, @ref_json = @update_items,
						@sp_rtn = @sp_rtn out, @sp_msg = @sp_msg out;

					if @sp_rtn <> 0 
					begin 
						if XACT_STATE() <> 0 rollback transaction;
						return;
					end
				end

		commit transaction

		select	@sp_rtn = 0, 
				@sp_msg = 'success';
		return;
	END TRY
	BEGIN CATCH
		if XACT_STATE() <> 0 rollback transaction;
		select	@sp_rtn = ERROR_NUMBER(), @sp_msg = ERROR_MESSAGE();
		exec dbo.sp_sys_error_log_create;
		return;
	END CATCH
GO
/****** Object:  StoredProcedure [dbo].[sp_character_relic_update]    Script Date: 2024-09-08 오전 12:06:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO





CREATE procedure [dbo].[sp_character_relic_update]
(
	@uid int = 0,
	@group_id int = 0,
	@lv int = 0,
	@bonus_prob int = 0,

	@update_items varchar(max) = '',
	@update_coins varchar(max) = '',
	@sp_rtn int = 0 output, 
	@sp_msg varchar(128) = '' output
)
as
	SET XACT_ABORT ON
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
	SET NOCOUNT ON

	BEGIN TRY
		declare @utc_date datetime2 = sysutcdatetime();

		begin transaction

			merge dbo.tb_character_relic as t_cr
				using ( select @uid as uid ) as s_cs
				on t_cr.uid = s_cs.uid and t_cr.group_id = @group_id 
				when matched then
					update set	lv = @lv,
								bonus_prob = @bonus_prob,
								dw_update_time = @utc_date
				when not matched by target then
					insert (uid, group_id, lv, bonus_prob, dw_update_time)
					values (@uid, @group_id, @lv, @bonus_prob, @utc_date);

					--update coin
			if LEN(@update_coins) > 0
				begin 
					exec dbo.sp_json_update_coin_count
						@uid = @uid, @ref_json = @update_coins,
						@sp_rtn = @sp_rtn out, @sp_msg = @sp_msg out;

					if @sp_rtn <> 0 
					begin 
						if XACT_STATE() <> 0 rollback transaction;
						return;
					end
				end

			--update item
			if LEN(@update_items) > 0
				begin
					exec dbo.sp_json_update_item_count
						@uid = @uid, @ref_json = @update_items,
						@sp_rtn = @sp_rtn out, @sp_msg = @sp_msg out;

					if @sp_rtn <> 0 
					begin 
						if XACT_STATE() <> 0 rollback transaction;
						return;
					end
				end

		commit transaction

		select	@sp_rtn = 0, 
				@sp_msg = 'success';
		return;
	END TRY
	BEGIN CATCH
		if XACT_STATE() <> 0 rollback transaction;
		select	@sp_rtn = ERROR_NUMBER(), @sp_msg = ERROR_MESSAGE();
		exec dbo.sp_sys_error_log_create;
		return;
	END CATCH
GO
/****** Object:  StoredProcedure [dbo].[sp_character_shop_buy]    Script Date: 2024-09-08 오전 12:06:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

create procedure [dbo].[sp_character_shop_buy]
(
	@uid bigint,
	
	@record_id bigint,
	@bought_cnt int,
	@reset_time bigint,

	@update_coins varchar(max) = '',
	@update_items varchar(max) = '',

	@sp_rtn int = 0 output, 
	@sp_msg varchar(128) = '' output
)
as
	SET XACT_ABORT ON
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
	SET NOCOUNT ON

	BEGIN TRY

		declare @utc_date datetime2 = sysutcdatetime();
		declare @curr_time bigint = (datediff(s, '1970-01-01', @utc_date));

		begin transaction

			--shop
			merge dbo.tb_character_shop as t_cs
			using ( select @uid as uid ) as s_crr
			on t_cs.uid = s_crr.uid and t_cs.shop_id = @record_id
			when matched then
				update set	[limit_count] = @bought_cnt,
							reset_time = @reset_time,
							dw_update_time = @utc_date
			when not matched by target then
				insert (uid, shop_id, limit_count, reset_time, dw_period_reward_time, dw_update_time)
				values (@uid, @record_id, @bought_cnt, @reset_time, @curr_time, @utc_date);

			if LEN(@update_coins) > 0
			begin 
				exec dbo.sp_json_update_coin_count
					@uid = @uid, @ref_json = @update_coins,
					@sp_rtn = @sp_rtn out, @sp_msg = @sp_msg out;

				if @sp_rtn <> 0 
				begin 
					if XACT_STATE() <> 0 rollback transaction;
					return;
				end
			end

			if LEN(@update_items) > 0
			begin
				exec dbo.sp_json_update_item_count
					@uid = @uid, @ref_json = @update_items,
					@sp_rtn = @sp_rtn out, @sp_msg = @sp_msg out;

				if @sp_rtn <> 0 
				begin 
					if XACT_STATE() <> 0 rollback transaction;
					return;
				end
			end


		
			if @sp_rtn <> 0
			begin
				if XACT_STATE() <> 0 rollback transaction;
				return;
			end

		commit transaction;

		select	@sp_rtn = 0, 
				@sp_msg = 'success';
		return;
	END TRY
	BEGIN CATCH
		if XACT_STATE() <> 0 rollback transaction;
			select	@sp_rtn = ERROR_NUMBER(), @sp_msg = ERROR_MESSAGE();
			exec dbo.sp_sys_error_log_create;
		return;
	END CATCH
GO
/****** Object:  StoredProcedure [dbo].[sp_character_skill_level_update]    Script Date: 2024-09-08 오전 12:06:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE procedure [dbo].[sp_character_skill_level_update]
(
	@uid int = 0,
	@group_id int = 0,
	@tid int = 0,
	@level int = 0,
	@update_coins varchar(1024) = '',
	@update_items varchar(1024) = '',
	@delete_items varchar(1024) = '',
	@sp_rtn int = 0 output, 
	@sp_msg varchar(128) = '' output
)
as
	SET XACT_ABORT ON
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
	SET NOCOUNT ON

	BEGIN TRY
		declare @utc_date datetime2 = sysutcdatetime();

		begin transaction

			update dbo.tb_character_skill
			set tid = @tid, level = @level
			where uid = @uid and group_id = @group_id

			if LEN(@delete_items) > 0
			begin
				exec sp_json_delete_item_count
				@uid = @uid, @ref_json = @delete_items,
				@sp_rtn = @sp_rtn out , @sp_msg = @sp_msg out
				
				if @sp_rtn <> 0 
					begin 
						if XACT_STATE() <> 0 rollback transaction;
						return;
					end
			end

			if LEN(@update_items) > 0
			begin
				exec dbo.sp_json_update_item_count
				@uid = @uid, @ref_json = @update_items,
				@sp_rtn = @sp_rtn out , @sp_msg = @sp_msg out

				if @sp_rtn <> 0 
					begin 
						if XACT_STATE() <> 0 rollback transaction;
						return;
					end
			end
			
			if LEN(@update_coins) > 0
			begin
				exec dbo.sp_json_update_coin_count
				@uid = @uid, @ref_json =@update_coins,
				@sp_rtn = @sp_rtn out, @sp_msg = @sp_msg out

				if @sp_rtn <> 0
					begin
						if XACT_STATE() <> 0 rollback transaction;
						return;
					end
			end

		commit transaction

		select	@sp_rtn = 0, 
				@sp_msg = 'success';
		return;
	END TRY
	BEGIN CATCH
		if XACT_STATE() <> 0 rollback transaction;
		select	@sp_rtn = ERROR_NUMBER(), @sp_msg = ERROR_MESSAGE();
		exec dbo.sp_sys_error_log_create;
		return;
	END CATCH
GO
/****** Object:  StoredProcedure [dbo].[sp_character_skill_open]    Script Date: 2024-09-08 오전 12:06:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE procedure [dbo].[sp_character_skill_open]
(
	@uid int = 0,
	@group_id int = 0,
	@tid int = 0,
	@level int = 0,
	@is_learend bit = FALSE,
	@sp_rtn int = 0 output, 
	@sp_msg varchar(128) = '' output
)
as
	SET XACT_ABORT ON
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
	SET NOCOUNT ON

	BEGIN TRY
		declare @utc_date datetime2 = sysutcdatetime();

		begin transaction

			merge dbo.tb_character_skill as t_cs
				using ( select @uid as uid ) as s_cs
				on t_cs.uid = s_cs.uid and t_cs.group_id = @group_Id
				when matched then
					update set	tid = @tid,
								level = @level,
								is_learend = @is_learend,
								dw_update_time = @utc_date
				when not matched by target then
					insert (uid, group_id, tid, level, is_learend, dw_update_time)
					values (@uid, @group_id, @tid, @level, @is_learend, @utc_date);

		commit transaction

		select	@sp_rtn = 0, 
				@sp_msg = 'success';
		return;
	END TRY
	BEGIN CATCH
		if XACT_STATE() <> 0 rollback transaction;
		select	@sp_rtn = ERROR_NUMBER(), @sp_msg = ERROR_MESSAGE();
		exec dbo.sp_sys_error_log_create;
		return;
	END CATCH
GO
/****** Object:  StoredProcedure [dbo].[sp_character_skill_preset_update]    Script Date: 2024-09-08 오전 12:06:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE procedure [dbo].[sp_character_skill_preset_update]
(
	@uid int = 0,
	@idx int = 0,
	@slot_json nvarchar(256) = '',
	@is_enable bit,
	@sp_rtn int = 0 output, 
	@sp_msg varchar(128) = '' output
)
as
	SET XACT_ABORT ON
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
	SET NOCOUNT ON

	BEGIN TRY
		declare @utc_date datetime2 = sysutcdatetime();

		begin transaction

			merge dbo.tb_character_skill_preset as t_csp
				using ( select @uid as uid ) as s_cep
				on t_csp.uid = s_cep.uid and t_csp.idx = @idx
				when matched then
					update set	equip_slot = @slot_json,
								is_enable = @is_enable,
								dw_update_time = @utc_date
				when not matched by target then
					insert (uid, idx, equip_slot, is_enable, dw_update_time)
					values (@uid, @idx, @slot_json, @is_enable, @utc_date);

		commit transaction

		select	@sp_rtn = 0, 
				@sp_msg = 'success';
		return;
	END TRY
	BEGIN CATCH
		if XACT_STATE() <> 0 rollback transaction;
		select	@sp_rtn = ERROR_NUMBER(), @sp_msg = ERROR_MESSAGE();
		exec dbo.sp_sys_error_log_create;
		return;
	END CATCH
GO
/****** Object:  StoredProcedure [dbo].[sp_character_stage_save]    Script Date: 2024-09-08 오전 12:06:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE procedure [dbo].[sp_character_stage_save]
(
	@uid int = 0,
	@stage_type tinyint = 0,
	@cur_tid int = 0,
	@max_tid int = 0,
	@total_cnt bigint = 0,
	@is_loop bit = false,
	
	@sp_rtn int = 0 output, 
	@sp_msg varchar(128) = '' output
)
as
	SET XACT_ABORT ON
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
	SET NOCOUNT ON

	BEGIN TRY
		declare @utc_date datetime2 = sysutcdatetime();
		
		begin transaction

			merge dbo.tb_character_stage as t_cs
				using ( select @uid as uid ) as s_cs
				on t_cs.uid = s_cs.uid and t_cs.type = @stage_type
				when matched then
					update set	cur_tid = @cur_tid,
								max_tid = @max_tid,
								total_cnt = @total_cnt,
								is_loop = @is_loop,
								dw_update_time = @utc_date
				when not matched by target then
					insert (uid, type, cur_tid, max_tid, total_cnt, is_loop, dw_update_time)
					values (@uid, @stage_type, @cur_tid, @max_tid, @total_cnt, @is_loop, @utc_date);

		commit transaction

		select	@sp_rtn = 0, 
				@sp_msg = 'success';
		return;
	END TRY
	BEGIN CATCH
		if XACT_STATE() <> 0 rollback transaction;
		select	@sp_rtn = ERROR_NUMBER(), @sp_msg = ERROR_MESSAGE();
		exec dbo.sp_sys_error_log_create;
		return;
	END CATCH
GO
/****** Object:  StoredProcedure [dbo].[sp_character_stage_skill_update]    Script Date: 2024-09-08 오전 12:06:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




create procedure [dbo].[sp_character_stage_skill_update]
(
	@uid int = 0,
	@type int = 0,
	@slot_json nvarchar(256) = '',
	@sp_rtn int = 0 output, 
	@sp_msg varchar(128) = '' output
)
as
	SET XACT_ABORT ON
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
	SET NOCOUNT ON

	BEGIN TRY
		declare @utc_date datetime2 = sysutcdatetime();

		begin transaction

			merge dbo.tb_character_stage_skill as t_css
				using ( select @uid as uid ) as s_css
				on t_css.uid = s_css.uid and t_css.type = @type
				when matched then
					update set	equip_slot = @slot_json,
								dw_update_time = @utc_date
				when not matched by target then
					insert (uid, type, equip_slot, dw_update_time)
					values (@uid, @type, @slot_json, @utc_date);

		commit transaction

		select	@sp_rtn = 0, 
				@sp_msg = 'success';
		return;
	END TRY
	BEGIN CATCH
		if XACT_STATE() <> 0 rollback transaction;
		select	@sp_rtn = ERROR_NUMBER(), @sp_msg = ERROR_MESSAGE();
		exec dbo.sp_sys_error_log_create;
		return;
	END CATCH
GO
/****** Object:  StoredProcedure [dbo].[sp_character_stage_sweep]    Script Date: 2024-09-08 오전 12:06:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE procedure [dbo].[sp_character_stage_sweep]
(
	@uid int = 0,

	@update_coin nvarchar(max) = '',
	@update_item nvarchar(max) = '',

	@sp_rtn int = 0 output, 
	@sp_msg varchar(128) = '' output
)
as
	SET XACT_ABORT ON
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
	SET NOCOUNT ON

	BEGIN TRY
		declare @utc_date datetime2 = sysutcdatetime();
		
		begin transaction

			if LEN(@update_coin) > 0
				begin 
					exec dbo.sp_json_update_coin_count
							@uid = @uid, @ref_json = @update_coin,
							@sp_rtn = @sp_rtn out, @sp_msg = @sp_msg out;

					if @sp_rtn <> 0 
					begin 
						if XACT_STATE() <> 0 rollback transaction;
						return;
					end
				end

				--update item
				if LEN(@update_item) > 0
					begin
						exec dbo.sp_json_update_item_count
							@uid = @uid, @ref_json = @update_item,
							@sp_rtn = @sp_rtn out, @sp_msg = @sp_msg out;

						if @sp_rtn <> 0 
						begin 
							if XACT_STATE() <> 0 rollback transaction;
							return;
						end
					end

		commit transaction

		select	@sp_rtn = 0, 
				@sp_msg = 'success';
		return;
	END TRY
	BEGIN CATCH
		if XACT_STATE() <> 0 rollback transaction;
		select	@sp_rtn = ERROR_NUMBER(), @sp_msg = ERROR_MESSAGE();
		exec dbo.sp_sys_error_log_create;
		return;
	END CATCH
GO
/****** Object:  StoredProcedure [dbo].[sp_character_stage_update]    Script Date: 2024-09-08 오전 12:06:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE procedure [dbo].[sp_character_stage_update]
(
	@uid int = 0,
	@stage_type tinyint = 0,
	@cur_tid int = 0,
	@max_tid int = 0,
	@total_cnt bigint = 0,
	@is_loop bit = false,
	@update_coin nvarchar(256) = '',
	@user_level int =0,
	@user_exp bigint = 0,
	@user_level_point int = 0,
	@user_event_stage int = 0,
	@update_item nvarchar(max),
	@sp_rtn int = 0 output, 
	@sp_msg varchar(128) = '' output
)
as
	SET XACT_ABORT ON
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
	SET NOCOUNT ON

	BEGIN TRY
		declare @utc_date datetime2 = sysutcdatetime();
		
		begin transaction

			merge dbo.tb_character_stage as t_cs
				using ( select @uid as uid ) as s_cs
				on t_cs.uid = s_cs.uid and t_cs.type = @stage_type
				when matched then
					update set	cur_tid = @cur_tid,
								max_tid = @max_tid,
								total_cnt = @total_cnt,
								is_loop = @is_loop,
								dw_update_time = @utc_date
				when not matched by target then
					insert (uid, type, cur_tid, max_tid, total_cnt, is_loop, dw_update_time)
					values (@uid, @stage_type, @cur_tid, @max_tid, @total_cnt, @is_loop, @utc_date);

					update dbo.tb_character
					set level = @user_level, exp = @user_exp, level_point = @user_level_point, event_stage = @user_event_stage
					where uid = @uid

					--asset update;
			if LEN(@update_coin) > 0
				begin 
					exec dbo.sp_json_update_coin_count
							@uid = @uid, @ref_json = @update_coin,
							@sp_rtn = @sp_rtn out, @sp_msg = @sp_msg out;

					if @sp_rtn <> 0 
					begin 
						if XACT_STATE() <> 0 rollback transaction;
						return;
					end
				end

				--update item
				if LEN(@update_item) > 0
					begin
						exec dbo.sp_json_update_item_count
							@uid = @uid, @ref_json = @update_item,
							@sp_rtn = @sp_rtn out, @sp_msg = @sp_msg out;

						if @sp_rtn <> 0 
						begin 
							if XACT_STATE() <> 0 rollback transaction;
							return;
						end
					end

		commit transaction

		select	@sp_rtn = 0, 
				@sp_msg = 'success';
		return;
	END TRY
	BEGIN CATCH
		if XACT_STATE() <> 0 rollback transaction;
		select	@sp_rtn = ERROR_NUMBER(), @sp_msg = ERROR_MESSAGE();
		exec dbo.sp_sys_error_log_create;
		return;
	END CATCH
GO
/****** Object:  StoredProcedure [dbo].[sp_character_view_user_info]    Script Date: 2024-09-08 오전 12:06:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO


CREATE procedure [dbo].[sp_character_view_user_info]
(
	@uid int = 0,

	@sp_rtn int = 0 output, 
	@sp_msg varchar(128) = '' output
)
as
	SET XACT_ABORT ON
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
	SET NOCOUNT ON

	BEGIN TRY
		declare @utc_date datetime2 = sysutcdatetime();
		declare @stage_type tinyint = 0;
		
		select tc.name, tc.level, tc.profile_id, tcs.max_tid
		from dbo.tb_character as tc with(nolock)
		join dbo.tb_character_stage as tcs with(nolock)
		on tcs.uid = tc.uid and tcs.type = @stage_type
		where tc.uid = @uid
		
		--item preset
		select 
			ci.table_id as item_tid,
			ci.level as item_lv,
			ci.random_option as item_options,
			sub.*
		from dbo.tb_character_item as ci with(nolock)
		join 
		(
			select 
				uid,
				JSON_VALUE(json_equipped_data.value, '$.ID') as item_uid
			from dbo.tb_character_equip_preset as cip with(nolock)
			cross apply openjson(cip.equip_slot) as json_equipped_data
			where uid = @uid and is_enable = 1
		) as sub
		on ci.uid = sub.uid and ci.item_id = sub.item_uid
		
		--knight preset
		select 
			ci.table_id as item_tid,
			ci.level as item_lv,
			ci.random_option as item_options,
			sub.*
		from dbo.tb_character_item as ci with(nolock)
		join 
		(
			select 
				uid,
				JSON_VALUE(json_equipped_data.value, '$.ID') as item_uid
			from dbo.tb_character_knight_preset as ckp with(nolock)
			cross apply openjson(ckp.equip_slot) as json_equipped_data
			where uid = @uid and is_enable = 1
		) as sub
		on ci.uid = sub.uid and ci.item_id = sub.item_uid
		
		--skill preset
		select 
			cs.group_id, cs.tid, cs.level,
			sub.*
		from dbo.tb_character_skill as cs with(nolock)
		join 
		(
			select 
				uid,
				JSON_VALUE(json_equipped_data.value, '$.ID') as skill_groupID
			from dbo.tb_character_skill_preset as csp with(nolock)
			cross apply openjson(csp.equip_slot) as json_equipped_data
			where uid = @uid and is_enable = 1
		) as sub
		on cs.uid = sub.uid and cs.group_id = sub.skill_groupID

		select	@sp_rtn = 0, 
				@sp_msg = 'success';
	return;
	END TRY
	BEGIN CATCH
		if XACT_STATE() <> 0 rollback transaction;
		select	@sp_rtn = ERROR_NUMBER(), @sp_msg = ERROR_MESSAGE();
		exec dbo.sp_sys_error_log_create;
		return;
	END CATCH
GO
/****** Object:  StoredProcedure [dbo].[sp_json_delete_item_count]    Script Date: 2024-09-08 오전 12:06:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE procedure [dbo].[sp_json_delete_item_count]
(
	@uid bigint,
	@ref_json varchar(max),

	@sp_rtn int = 0 output, 
	@sp_msg varchar(128) = '' output
)
as
	SET XACT_ABORT ON
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
	SET NOCOUNT ON

	BEGIN TRY
		declare @utc_date datetime2 = sysutcdatetime();
		
		begin transaction

			delete from dbo.tb_character_item
			where uid = @uid and item_id in
			(
				select ItemID
				from openjson (@ref_json) with
				(
					ItemID bigint
				)
			)

		commit transaction

		select	@sp_rtn = 0,
				@sp_msg = 'success';
		return;

	END TRY
	BEGIN CATCH
		select	@sp_rtn = ERROR_NUMBER(), @sp_msg = ERROR_MESSAGE();
		exec dbo.sp_sys_error_log_create;
		return;
	END CATCH
GO
/****** Object:  StoredProcedure [dbo].[sp_json_update_coin_count]    Script Date: 2024-09-08 오전 12:06:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE procedure [dbo].[sp_json_update_coin_count]
(
	@uid bigint,
	@ref_json varchar(max),

	@sp_rtn int = 0 output, 
	@sp_msg varchar(128) = '' output
)
as
	SET XACT_ABORT ON
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
	SET NOCOUNT ON

	BEGIN TRY
		declare @utc_date datetime2 = sysutcdatetime();
		
		begin transaction

			merge dbo.tb_character_coin as t_ca
			using 
			(
				select Type, TableID, count
				from openjson(@ref_json) with
					(
						Type tinyint, TableID nvarchar(32), Count bigint
					)
			) as s_ca(Type, TableID , Count)
			on t_ca.uid = @uid and
				t_ca.type = s_ca.TableID
			when matched then
				update set	value += s_ca.count, 
							dw_update_time = @utc_date
			when not matched by target then
				insert (uid, type, value, dw_update_time)
				values (@uid, s_ca.TableID, s_ca.Count, @utc_date);

		commit transaction

		select	@sp_rtn = 0,
				@sp_msg = 'success';
		return;

	END TRY
	BEGIN CATCH
		select	@sp_rtn = ERROR_NUMBER(), @sp_msg = ERROR_MESSAGE();
		exec dbo.sp_sys_error_log_create;
		return;
	END CATCH
GO
/****** Object:  StoredProcedure [dbo].[sp_json_update_item_count]    Script Date: 2024-09-08 오전 12:06:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE procedure [dbo].[sp_json_update_item_count]
(
	@uid bigint,
	@ref_json varchar(max),

	@sp_rtn int = 0 output, 
	@sp_msg varchar(128) = '' output
)
as
	SET XACT_ABORT ON
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
	SET NOCOUNT ON

	BEGIN TRY
		declare @utc_date datetime2 = sysutcdatetime();
		declare @default_in_used bit = 'false';
		declare @default_rand_option varchar(32) = ''

		begin transaction

			merge dbo.tb_character_item as t_ci
			using 
			(
				select ItemID, TableID, Level, Count
				from openjson(@ref_json) with
					(
						ItemID bigint, TableID nvarchar(64), Level int, Count bigint
					)
			) as s_ci(ItemID, TableID, Level, Count)
			on t_ci.uid = @uid and
				t_ci.item_id = s_ci.ItemID
			when matched then
				update set	t_ci.Count += s_ci.count, 
							dw_update_time = @utc_date
			when not matched by target then
				insert 
				(
					uid, item_id, table_id, level, 
					Count, in_used, random_option, dw_update_time
				)
				values 
				(
					@uid, s_ci.ItemID, s_ci.TableID, s_ci.Level, 
					s_ci.Count, @default_in_used, @default_rand_option, @utc_date
				);

		commit transaction

		select	@sp_rtn = 0,
				@sp_msg = 'success';
		return;

	END TRY
	BEGIN CATCH
		select	@sp_rtn = ERROR_NUMBER(), @sp_msg = ERROR_MESSAGE();
		exec dbo.sp_sys_error_log_create;
		return;
	END CATCH
GO
/****** Object:  StoredProcedure [dbo].[sp_sys_error_log_create]    Script Date: 2024-09-08 오전 12:06:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



create procedure [dbo].[sp_sys_error_log_create]
as
	set nocount on;
	set xact_abort on;

	begin
		begin try
			if error_number() is null
				return;

			if xact_state() = -1
			begin 
				print 'Cannot log error since the current transaction is in an uncommittable state. ' 
		            + 'Rollback the transaction before executing P_ERROR_LOG_C in order to successfully log error information.';
		        return;
			end

			insert dbo.tb_sys_error_log 
			(
				user_name, error_no, error_serverity, error_state, error_proc,
				error_line, error_msg, ipt_time
			)
			values
			(
				convert(sysname, suser_sname()), error_number(), error_severity(), error_state(), error_procedure(),
		        error_line(), error_message(), getdate()
			);

		end try
		begin catch
			EXEC dbo.sp_sys_error_log_create;
		end catch
	end;

GO
/****** Object:  StoredProcedure [dbo].[sp_system_coupon_upsert]    Script Date: 2024-09-08 오전 12:06:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE procedure [dbo].[sp_system_coupon_upsert]
(
	@coupon_id nvarchar(64) = '',
	@cnt int = 0,
	@use_level int = 0,
	@begin_time bigint = 0,
	@expire_time bigint = 0,
	@reward varchar(max) = '',

	@sp_rtn int = 0 output, 
	@sp_msg varchar(128) = '' output
)
as
	SET XACT_ABORT ON
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
	SET NOCOUNT ON

	BEGIN TRY
		declare @utc_date datetime2 = sysutcdatetime();
		declare @login_time bigint = DATEDIFF(SECOND,{d '1970-01-01'}, @utc_date)
		
		begin transaction
			
		merge dbo.tb_system_coupon as t_cs
		using ( select @coupon_id as cid ) as s_cc
		on t_cs.coupon_id = s_cc.cid
		when matched then
		update set	cnt = @cnt, use_level = @use_level,
					begin_time = @begin_time,
					expire_time = @expire_time,
					dw_update_time = @utc_date
		when not matched by target then
			insert (coupon_id, cnt, use_level, [begin_time], [expire_time], [reward], [dw_update_time])
			values (@coupon_id, @cnt, @use_level, @begin_time, @expire_time, @reward, @utc_date);

		commit transaction

		select	@sp_rtn = 0, 
				@sp_msg = 'success';
		return;
	END TRY
	BEGIN CATCH
		if XACT_STATE() <> 0 rollback transaction;
		select	@sp_rtn = ERROR_NUMBER(), @sp_msg = ERROR_MESSAGE();
		exec dbo.sp_sys_error_log_create;
		return;
	END CATCH
GO
/****** Object:  StoredProcedure [dbo].[sp_system_load_event]    Script Date: 2024-09-08 오전 12:06:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO





create procedure [dbo].[sp_system_load_event]
(
	@sp_rtn int = 0 output, 
	@sp_msg varchar(128) = '' output
)
as
	SET XACT_ABORT ON
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
	SET NOCOUNT ON

	BEGIN TRY
		declare @utc_date datetime2 = sysutcdatetime();
		
		select uid, event_id, start_date, end_date
		from dbo.tb_system_event

		select	@sp_rtn = 0, 
				@sp_msg = 'success';
		return;
	END TRY
	BEGIN CATCH
		select	@sp_rtn = ERROR_NUMBER(), @sp_msg = ERROR_MESSAGE();
		exec dbo.sp_sys_error_log_create;
		return;
	END CATCH
GO
/****** Object:  StoredProcedure [dbo].[sp_system_load_rank_main]    Script Date: 2024-09-08 오전 12:06:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO





CREATE procedure [dbo].[sp_system_load_rank_main]
(
	@db_stage_type tinyint,
	@db_max_rank_count int,
	@db_min_value int,

	@sp_rtn int = 0 output, 
	@sp_msg varchar(128) = '' output
)
as
	SET XACT_ABORT ON
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
	SET NOCOUNT ON

	BEGIN TRY
		declare @utc_date datetime2 = sysutcdatetime();
		declare @final_date datetime2 = (DATEADD(WEEK, -1, @utc_date));
		declare @page_offset int = 0;
		declare @page_fetch_cnt int = @db_max_rank_count

		--order by stageid, name asc
		select cs.uid, c.device_id, c.name, cs.max_tid, c.level, c.profile_id
		from dbo.tb_character_stage as cs
		join dbo.tb_character as c 
		on c.uid = cs.uid
		where 
			cs.type = @db_stage_type and 
			cs.max_tid >= @db_min_value and
			cs.dw_update_time >= @final_date
		order by 
			cs.max_tid desc, c.name asc
		offset @page_offset rows
		fetch next @page_fetch_cnt rows only;


		--join dbo.tb_character_item_preset as cip
		--on cip.account_id = cs.account_id and cip.type = 0 and cip.no = 0
		--left join dbo.tb_guild_member as gm
		--on gm.account_id = cs.account_id
		--where 
		--	cs.stage_type = @db_stage_type and 
		--	cs.final_stage_tid >= @db_min_value and 
		--	cs.dw_update_time >= @final_date
		--order by 
		--	cs.final_stage_tid desc, cs.dw_final_stage_time asc
		--offset @page_offset rows
		--fetch next @page_fetch_cnt rows only;

		----rank
		--select min(dw_create_time) as dw_create_time
		--from tb_character_main_reward

		----set define ?
		--declare @sys_define_key int = 1;

		--update dbo.tb_system_define
		--set rank_sort_date = @final_date
		--where [index] = @sys_define_key

		--if @@ROWCOUNT = 0
		--begin 
		--	insert into dbo.tb_system_define([index], rank_sort_date)
		--	values(@sys_define_key, @final_date)
		--end

		select	@sp_rtn = 0, 
				@sp_msg = 'success';
		return;
	END TRY
	BEGIN CATCH
		select	@sp_rtn = ERROR_NUMBER(), @sp_msg = ERROR_MESSAGE();
		exec dbo.sp_sys_error_log_create;
		return;
	END CATCH
GO
/****** Object:  StoredProcedure [dbo].[sp_system_load_rank_pvp]    Script Date: 2024-09-08 오전 12:06:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO





CREATE procedure [dbo].[sp_system_load_rank_pvp]
(
	@db_coin_type varchar(max)= '',
	@db_max_rank_count int,
	
	@sp_rtn int = 0 output, 
	@sp_msg varchar(128) = '' output
)
as
	SET XACT_ABORT ON
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
	SET NOCOUNT ON

	BEGIN TRY
		declare @utc_date datetime2 = sysutcdatetime();
		declare @final_date datetime2 = (DATEADD(WEEK, -1, @utc_date));
		declare @page_offset int = 0;
		declare @page_fetch_cnt int = @db_max_rank_count
		
		--order by stageid, name asc
		select cc.uid, c.device_id, c.name, cc.value, c.level, c.profile_id
		from dbo.tb_character_coin as cc
		join dbo.tb_character as c 
		on c.uid = cc.uid
		where 
			cc.type = @db_coin_type and 
			cc.value > 0
		order by 
			cc.value desc, c.name asc
		offset @page_offset rows
		fetch next @page_fetch_cnt rows only;

		--join dbo.tb_character_item_preset as cip
		--on cip.account_id = cs.account_id and cip.type = 0 and cip.no = 0
		--left join dbo.tb_guild_member as gm
		--on gm.account_id = cs.account_id
		--where 
		--	cs.stage_type = @db_stage_type and 
		--	cs.final_stage_tid >= @db_min_value and 
		--	cs.dw_update_time >= @final_date
		--order by 
		--	cs.final_stage_tid desc, cs.dw_final_stage_time asc
		--offset @page_offset rows
		--fetch next @page_fetch_cnt rows only;

		----rank
		--select min(dw_create_time) as dw_create_time
		--from tb_character_main_reward

		----set define ?
		--declare @sys_define_key int = 1;

		--update dbo.tb_system_define
		--set rank_sort_date = @final_date
		--where [index] = @sys_define_key

		--if @@ROWCOUNT = 0
		--begin 
		--	insert into dbo.tb_system_define([index], rank_sort_date)
		--	values(@sys_define_key, @final_date)
		--end

		select	@sp_rtn = 0, 
				@sp_msg = 'success';
		return;
	END TRY
	BEGIN CATCH
		select	@sp_rtn = ERROR_NUMBER(), @sp_msg = ERROR_MESSAGE();
		exec dbo.sp_sys_error_log_create;
		return;
	END CATCH
GO
/****** Object:  StoredProcedure [dbo].[sp_system_load_schedule]    Script Date: 2024-09-08 오전 12:06:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO





CREATE procedure [dbo].[sp_system_load_schedule]
(
	@sp_rtn int = 0 output, 
	@sp_msg varchar(128) = '' output
)
as
	SET XACT_ABORT ON
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
	SET NOCOUNT ON

	BEGIN TRY
		declare @utc_date datetime2 = sysutcdatetime();
		
		select uid, type, param, val, start_date, end_date,
		day_week, start_time, end_time
		from dbo.tb_system_schedule

		--join dbo.tb_character_item_preset as cip
		--on cip.account_id = cs.account_id and cip.type = 0 and cip.no = 0
		--left join dbo.tb_guild_member as gm
		--on gm.account_id = cs.account_id
		--where 
		--	cs.stage_type = @db_stage_type and 
		--	cs.final_stage_tid >= @db_min_value and 
		--	cs.dw_update_time >= @final_date
		--order by 
		--	cs.final_stage_tid desc, cs.dw_final_stage_time asc
		--offset @page_offset rows
		--fetch next @page_fetch_cnt rows only;

		----rank
		--select min(dw_create_time) as dw_create_time
		--from tb_character_main_reward

		----set define ?
		--declare @sys_define_key int = 1;

		--update dbo.tb_system_define
		--set rank_sort_date = @final_date
		--where [index] = @sys_define_key

		--if @@ROWCOUNT = 0
		--begin 
		--	insert into dbo.tb_system_define([index], rank_sort_date)
		--	values(@sys_define_key, @final_date)
		--end

		select	@sp_rtn = 0, 
				@sp_msg = 'success';
		return;
	END TRY
	BEGIN CATCH
		select	@sp_rtn = ERROR_NUMBER(), @sp_msg = ERROR_MESSAGE();
		exec dbo.sp_sys_error_log_create;
		return;
	END CATCH
GO
/****** Object:  StoredProcedure [dbo].[sp_system_post_upsert]    Script Date: 2024-09-08 오전 12:06:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE procedure [dbo].[sp_system_post_upsert]
(
	@post_id bigint = 0,
	@type tinyint = 0,
	@title nvarchar(max) = '',
	@msg nvarchar(max) = '',
	@begin_time bigint = 0,
	@expire_time bigint = 0,
	@reward varchar(max) = '',

	@sp_rtn int = 0 output, 
	@sp_msg varchar(128) = '' output
)
as
	SET XACT_ABORT ON
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
	SET NOCOUNT ON

	BEGIN TRY
		declare @utc_date datetime2 = sysutcdatetime();
		declare @login_time bigint = DATEDIFF(SECOND,{d '1970-01-01'}, @utc_date)
		declare @InsertedIds TABLE (id bigint);

		begin transaction
		merge dbo.tb_system_post as t_cp
		using ( select @post_id as pid ) as s_cp
		on t_cp.id = s_cp.pid
		when matched then
		update set	type = @type, title = @title, msg = @msg,
					begin_time = @begin_time,
					expire_time = @expire_time,
					dw_update_time = @utc_date
		when not matched by target then
			insert ([type], [title], [msg], [begin_time], [expire_time], [reward], [dw_update_time])
			values (@type, @title, @msg, @begin_time, @expire_time, @reward, @utc_date)
		OUTPUT INSERTED.id INTO @InsertedIds; 

		select id, type, title, msg, begin_time, expire_time, reward
		from dbo.tb_system_post
		where id = (select top(1)id
		from @InsertedIds)

		commit transaction

		select	@sp_rtn = 0, 
				@sp_msg = 'success';
		return;
	END TRY
	BEGIN CATCH
		if XACT_STATE() <> 0 rollback transaction;
		select	@sp_rtn = ERROR_NUMBER(), @sp_msg = ERROR_MESSAGE();
		exec dbo.sp_sys_error_log_create;
		return;
	END CATCH
GO
/****** Object:  StoredProcedure [dbo].[sp_tool_character_gacha_load]    Script Date: 2024-09-08 오전 12:06:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO





CREATE procedure [dbo].[sp_tool_character_gacha_load]
(
	@uid bigint = 0,
	@deviceid nvarchar(max) = '',
	@name nvarchar(max) = '',

	@sp_rtn int = 0 output, 
	@sp_msg varchar(128) = '' output
)
as
	SET XACT_ABORT ON
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
	SET NOCOUNT ON

	BEGIN TRY
		declare @utc_date datetime2 = sysutcdatetime();
		declare @login_time bigint = DATEDIFF(SECOND,{d '1970-01-01'}, @utc_date)
		
		--gacha level
		select id, lv, exp, rewarded
		from dbo.tb_character_gacha
		where uid = @uid
	
		select	@sp_rtn = 0, 
				@sp_msg = 'success';
		return;
	END TRY
	BEGIN CATCH
		if XACT_STATE() <> 0 rollback transaction;
		select	@sp_rtn = ERROR_NUMBER(), @sp_msg = ERROR_MESSAGE();
		exec dbo.sp_sys_error_log_create;
		return;
	END CATCH
GO
/****** Object:  StoredProcedure [dbo].[sp_tool_character_growthgold_load]    Script Date: 2024-09-08 오전 12:06:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO





CREATE procedure [dbo].[sp_tool_character_growthgold_load]
(
	@uid bigint = 0,
	@deviceid nvarchar(max) = '',
	@name nvarchar(max) = '',

	@sp_rtn int = 0 output, 
	@sp_msg varchar(128) = '' output
)
as
	SET XACT_ABORT ON
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
	SET NOCOUNT ON

	BEGIN TRY
		declare @utc_date datetime2 = sysutcdatetime();
		declare @login_time bigint = DATEDIFF(SECOND,{d '1970-01-01'}, @utc_date)
		
		--growth level
		select id, value
		from dbo.tb_character_growth_gold
		where uid = @uid
	
		select	@sp_rtn = 0, 
				@sp_msg = 'success';
		return;
	END TRY
	BEGIN CATCH
		if XACT_STATE() <> 0 rollback transaction;
		select	@sp_rtn = ERROR_NUMBER(), @sp_msg = ERROR_MESSAGE();
		exec dbo.sp_sys_error_log_create;
		return;
	END CATCH
GO
/****** Object:  StoredProcedure [dbo].[sp_tool_character_growthlevel_load]    Script Date: 2024-09-08 오전 12:06:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO





CREATE procedure [dbo].[sp_tool_character_growthlevel_load]
(
	@uid bigint = 0,
	@deviceid nvarchar(max) = '',
	@name nvarchar(max) = '',

	@sp_rtn int = 0 output, 
	@sp_msg varchar(128) = '' output
)
as
	SET XACT_ABORT ON
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
	SET NOCOUNT ON

	BEGIN TRY
		declare @utc_date datetime2 = sysutcdatetime();
		declare @login_time bigint = DATEDIFF(SECOND,{d '1970-01-01'}, @utc_date)
		
		--growth level
		select id, value
		from dbo.tb_character_growth_level
		where uid = @uid
	
		select	@sp_rtn = 0, 
				@sp_msg = 'success';
		return;
	END TRY
	BEGIN CATCH
		if XACT_STATE() <> 0 rollback transaction;
		select	@sp_rtn = ERROR_NUMBER(), @sp_msg = ERROR_MESSAGE();
		exec dbo.sp_sys_error_log_create;
		return;
	END CATCH
GO
/****** Object:  StoredProcedure [dbo].[sp_tool_character_info_load]    Script Date: 2024-09-08 오전 12:06:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO





CREATE procedure [dbo].[sp_tool_character_info_load]
(
	@uid bigint = 0,
	@deviceid nvarchar(max) = '',
	@name nvarchar(max) = '',

	@sp_rtn int = 0 output, 
	@sp_msg varchar(128) = '' output
)
as
	SET XACT_ABORT ON
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
	SET NOCOUNT ON

	BEGIN TRY
		declare @utc_date datetime2 = sysutcdatetime();
		declare @login_time bigint = DATEDIFF(SECOND,{d '1970-01-01'}, @utc_date)
		
		if @uid = -1
		begin
			if len(@deviceid) > 0
			begin
				set @uid = (select isnull(MAX(UID), -1) UID
				from dbo.tb_character with(nolock)
				where device_id = @deviceid)

				if @uid = -1
				begin
					select	@sp_rtn = 1, 
							@sp_msg = 'NOT FOUND DATA';
				end
			end
			else if len(@name) > 0
			begin
				set @uid = (select isnull(MAX(UID), -1) UID
					from dbo.tb_character with(nolock)
					where name = @name)

					if @uid = -1
					begin
						select	@sp_rtn = 1, 
								@sp_msg = 'NOT FOUND DATA';
					end
			end
		end

		--character info
		select uid, name, device_id, level, exp, level_point, login_time, logout_time
		from dbo.tb_character with(nolock)
		where uid = @uid

		--gacha
		select id, lv, exp, rewarded
		from dbo.tb_character_gacha with(nolock)
		where uid = @uid

		--coin
		select type, value
		from dbo.tb_character_coin with(nolock)
		where uid = @uid

		--stage
		select type, cur_tid, max_tid, total_cnt
		from dbo.tb_character_stage with(nolock)
		where uid = @uid

		--receipt
		select transaction_id, store_type, tcs.product_id as product_id, ti.price as price,
		mail_guid, tcs.dw_update_time
		from dbo.tb_character_shop_iap_receipt as tcs
		join dbo.tb_test_iap_price as ti
		on ti.product_id = tcs.product_id
		where tcs.uid = @uid
		
		select	@sp_rtn = 0, 
				@sp_msg = 'success';
		return;
	END TRY
	BEGIN CATCH
		if XACT_STATE() <> 0 rollback transaction;
		select	@sp_rtn = ERROR_NUMBER(), @sp_msg = ERROR_MESSAGE();
		exec dbo.sp_sys_error_log_create;
		return;
	END CATCH
GO
/****** Object:  StoredProcedure [dbo].[sp_tool_character_post_insert]    Script Date: 2024-09-08 오전 12:06:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE procedure [dbo].[sp_tool_character_post_insert]
(
	@user_uid bigint = 0,
	@post_id bigint = 0,
	@type tinyint = 0,
	@title nvarchar(max) = '',
	@msg nvarchar(max) = '',
	@begin_time bigint = 0,
	@expire_time bigint = 0,
	@reward varchar(max) = '',

	@sp_rtn int = 0 output, 
	@sp_msg varchar(128) = '' output
)
as
	SET XACT_ABORT ON
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
	SET NOCOUNT ON

	BEGIN TRY
		declare @utc_date datetime2 = sysutcdatetime();
		declare @login_time bigint = DATEDIFF(SECOND,{d '1970-01-01'}, @utc_date)
		
		begin transaction
			INSERT INTO [dbo].[tb_character_post]
			   ([uid]
			   ,[id]
			   ,[type]
			   ,[title]
			   ,[msg]
			   ,[is_read]
			   ,[is_reward]
			   ,[begin_time]
			   ,[expire_time]
			   ,[reward]
			   ,[dw_update_time])
			VALUES
			   (@user_uid
			   ,@post_id
			   ,@type
			   ,@title
			   ,@msg
			   ,'FALSE'
			   ,'FALSE'
			   ,@begin_time
			   ,@expire_time
			   ,@reward
			   ,@utc_date)

		select id, type, title, msg, is_read, is_reward, begin_time, expire_time, reward
		from dbo.tb_character_post
		where uid = @user_uid and id = @post_id

		commit transaction

		select	@sp_rtn = 0, 
				@sp_msg = 'success';
		return;
	END TRY
	BEGIN CATCH
		if XACT_STATE() <> 0 rollback transaction;
		select	@sp_rtn = ERROR_NUMBER(), @sp_msg = ERROR_MESSAGE();
		exec dbo.sp_sys_error_log_create;
		return;
	END CATCH
GO
/****** Object:  StoredProcedure [dbo].[sp_tool_character_post_load]    Script Date: 2024-09-08 오전 12:06:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO




CREATE procedure [dbo].[sp_tool_character_post_load]
(
	@user_id bigint = 0,
	@start_time bigint = 0,
	@end_time bigint = 0,
	
	@sp_rtn int = 0 output, 
	@sp_msg varchar(128) = '' output
)
as
	SET XACT_ABORT ON
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
	SET NOCOUNT ON

	BEGIN TRY
		declare @utc_date datetime2 = sysutcdatetime();
		declare @utc_time bigint = DATEDIFF(SECOND,{d '1970-01-01'}, @utc_date)
		
		select id, type, title, msg, is_read, is_reward, begin_time, expire_time, reward
		from dbo.tb_character_post with(nolock)
		where uid = @user_id
		and begin_time between @start_time and @end_time
		
		select	@sp_rtn = 0, 
				@sp_msg = 'success';

		return;
	END TRY
	BEGIN CATCH
		if XACT_STATE() <> 0 rollback transaction;
		select	@sp_rtn = ERROR_NUMBER(), @sp_msg = ERROR_MESSAGE();
		exec dbo.sp_sys_error_log_create;
		return;
	END CATCH
GO
/****** Object:  StoredProcedure [dbo].[sp_tool_character_quest_load]    Script Date: 2024-09-08 오전 12:06:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO





CREATE procedure [dbo].[sp_tool_character_quest_load]
(
	@uid bigint = 0,
	@deviceid nvarchar(max) = '',
	@name nvarchar(max) = '',

	@sp_rtn int = 0 output, 
	@sp_msg varchar(128) = '' output
)
as
	SET XACT_ABORT ON
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
	SET NOCOUNT ON

	BEGIN TRY
		declare @utc_date datetime2 = sysutcdatetime();
		declare @login_time bigint = DATEDIFF(SECOND,{d '1970-01-01'}, @utc_date)
		
		--quest main
		select id, idx, val, state
		from dbo.tb_character_quest_main
		where uid = @uid
		
		--quest repeat
		select id, idx, val, state, pass_rewarded
		from dbo.tb_character_quest_repeat
		where uid = @uid

		--quest daily
		select id, idx, val, state, exp_time
		from dbo.tb_character_quest_daily
		where uid = @uid

		--quest checkin
		select quest_id, id, idx, val, state, exp_time
		from dbo.tb_character_quest_checkin
		where uid = @uid


		select	@sp_rtn = 0, 
				@sp_msg = 'success';
		return;
	END TRY
	BEGIN CATCH
		if XACT_STATE() <> 0 rollback transaction;
		select	@sp_rtn = ERROR_NUMBER(), @sp_msg = ERROR_MESSAGE();
		exec dbo.sp_sys_error_log_create;
		return;
	END CATCH
GO
/****** Object:  StoredProcedure [dbo].[sp_tool_character_relic_load]    Script Date: 2024-09-08 오전 12:06:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO





create procedure [dbo].[sp_tool_character_relic_load]
(
	@uid bigint = 0,
	@deviceid nvarchar(max) = '',
	@name nvarchar(max) = '',

	@sp_rtn int = 0 output, 
	@sp_msg varchar(128) = '' output
)
as
	SET XACT_ABORT ON
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
	SET NOCOUNT ON

	BEGIN TRY
		declare @utc_date datetime2 = sysutcdatetime();
		declare @login_time bigint = DATEDIFF(SECOND,{d '1970-01-01'}, @utc_date)
		
		--relic
		select group_id, lv, bonus_prob
		from dbo.tb_character_relic
		where uid = @uid

		select	@sp_rtn = 0, 
				@sp_msg = 'success';
		return;
	END TRY
	BEGIN CATCH
		if XACT_STATE() <> 0 rollback transaction;
		select	@sp_rtn = ERROR_NUMBER(), @sp_msg = ERROR_MESSAGE();
		exec dbo.sp_sys_error_log_create;
		return;
	END CATCH
GO
/****** Object:  StoredProcedure [dbo].[sp_tool_system_coupon_load]    Script Date: 2024-09-08 오전 12:06:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO





CREATE procedure [dbo].[sp_tool_system_coupon_load]
(
	@begin_time bigint = -1,
	@end_time bigint = -1,

	@sp_rtn int = 0 output, 
	@sp_msg varchar(128) = '' output
)
as
	SET XACT_ABORT ON
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
	SET NOCOUNT ON

	BEGIN TRY
		declare @utc_date datetime2 = sysutcdatetime();
		declare @login_time bigint = DATEDIFF(SECOND,{d '1970-01-01'}, @utc_date)
		
		select coupon_id, cnt, use_level, begin_time, expire_time, reward
		from dbo.tb_system_coupon with(nolock)
		where begin_time between @begin_time and @end_time
	
		select	@sp_rtn = 0, 
				@sp_msg = 'success';
		return;
	END TRY
	BEGIN CATCH
		if XACT_STATE() <> 0 rollback transaction;
		select	@sp_rtn = ERROR_NUMBER(), @sp_msg = ERROR_MESSAGE();
		exec dbo.sp_sys_error_log_create;
		return;
	END CATCH
GO
/****** Object:  StoredProcedure [dbo].[sp_tool_system_coupon_upsert]    Script Date: 2024-09-08 오전 12:06:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE procedure [dbo].[sp_tool_system_coupon_upsert]
(
	@coupon_id nvarchar(64) = '',
	@cnt int = 0,
	@use_level int = 0,
	@begin_time bigint = 0,
	@expire_time bigint = 0,
	@reward varchar(max) = '',

	@sp_rtn int = 0 output, 
	@sp_msg varchar(128) = '' output
)
as
	SET XACT_ABORT ON
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
	SET NOCOUNT ON

	BEGIN TRY
		declare @utc_date datetime2 = sysutcdatetime();
		declare @login_time bigint = DATEDIFF(SECOND,{d '1970-01-01'}, @utc_date)
		
		begin transaction
			
		merge dbo.tb_system_coupon as t_cs
		using ( select @coupon_id as cid ) as s_cc
		on t_cs.coupon_id = s_cc.cid
		when matched then
		update set	cnt = @cnt, use_level = @use_level,
					begin_time = @begin_time,
					expire_time = @expire_time,
					dw_update_time = @utc_date
		when not matched by target then
			insert (coupon_id, cnt, use_level, [begin_time], [expire_time], [reward], [dw_update_time])
			values (@coupon_id, @cnt, @use_level, @begin_time, @expire_time, @reward, @utc_date);

		select coupon_Id, cnt, use_level, begin_time, expire_time, reward
		from dbo.tb_system_coupon with(nolock)
		where coupon_id = @coupon_id



		commit transaction

		select	@sp_rtn = 0, 
				@sp_msg = 'success';
		return;
	END TRY
	BEGIN CATCH
		if XACT_STATE() <> 0 rollback transaction;
		select	@sp_rtn = ERROR_NUMBER(), @sp_msg = ERROR_MESSAGE();
		exec dbo.sp_sys_error_log_create;
		return;
	END CATCH
GO
/****** Object:  StoredProcedure [dbo].[sp_tool_system_post_load]    Script Date: 2024-09-08 오전 12:06:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO





create procedure [dbo].[sp_tool_system_post_load]
(
	@begin bigint = -1,
	@end bigint = -1,

	@sp_rtn int = 0 output, 
	@sp_msg varchar(128) = '' output
)
as
	SET XACT_ABORT ON
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
	SET NOCOUNT ON

	BEGIN TRY
		declare @utc_date datetime2 = sysutcdatetime();
		declare @login_time bigint = DATEDIFF(SECOND,{d '1970-01-01'}, @utc_date)
		
		select id, type, title, msg, begin_time, expire_time, reward
		from dbo.tb_system_post with(nolock)
		where begin_time between @begin and @end
	
		select	@sp_rtn = 0, 
				@sp_msg = 'success';
		return;
	END TRY
	BEGIN CATCH
		if XACT_STATE() <> 0 rollback transaction;
		select	@sp_rtn = ERROR_NUMBER(), @sp_msg = ERROR_MESSAGE();
		exec dbo.sp_sys_error_log_create;
		return;
	END CATCH
GO
/****** Object:  StoredProcedure [dbo].[sp_tool_system_post_upsert]    Script Date: 2024-09-08 오전 12:06:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE procedure [dbo].[sp_tool_system_post_upsert]
(
	@post_id bigint = 0,
	@type tinyint = 0,
	@title nvarchar(max) = '',
	@msg nvarchar(max) = '',
	@begin_time bigint = 0,
	@expire_time bigint = 0,
	@reward varchar(max) = '',

	@sp_rtn int = 0 output, 
	@sp_msg varchar(128) = '' output
)
as
	SET XACT_ABORT ON
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
	SET NOCOUNT ON

	BEGIN TRY
		declare @utc_date datetime2 = sysutcdatetime();
		declare @login_time bigint = DATEDIFF(SECOND,{d '1970-01-01'}, @utc_date)
		
		declare @InsertedIds TABLE (id bigint);

		begin transaction
		merge dbo.tb_system_post as t_cp
		using ( select @post_id as pid ) as s_cp
		on t_cp.id = s_cp.pid
		when matched then
		update set	type = @type, title = @title, msg = @msg,
					begin_time = @begin_time,
					expire_time = @expire_time,
					dw_update_time = @utc_date
		when not matched by target then
			insert ([type], [title], [msg], [begin_time], [expire_time], [reward], [dw_update_time])
			values (@type, @title, @msg, @begin_time, @expire_time, @reward, @utc_date)
		OUTPUT INSERTED.id INTO @InsertedIds; 

		select id, type, title, msg, begin_time, expire_time, reward
		from dbo.tb_system_post
		where id = (select top(1)id
		from @InsertedIds)

		commit transaction

		select	@sp_rtn = 0, 
				@sp_msg = 'success';
		return;
	END TRY
	BEGIN CATCH
		if XACT_STATE() <> 0 rollback transaction;
		select	@sp_rtn = ERROR_NUMBER(), @sp_msg = ERROR_MESSAGE();
		exec dbo.sp_sys_error_log_create;
		return;
	END CATCH
GO
/****** Object:  StoredProcedure [dbo].[sp_user_shop_iap_update]    Script Date: 2024-09-08 오전 12:06:34 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO

CREATE procedure [dbo].[sp_user_shop_iap_update]
(
	@uid bigint,
	@store_type tinyint,
	@transaction_id varchar(64),
	@product_id varchar(32),

	@record_id bigint,
	@bought_cnt int,
	@reset_time bigint,

	@mail_type tinyint = 0,
	@mail_uid bigint = -1,
	@mail_title nvarchar(128) = N'',
	@mail_msg nvarchar(2048) = N'',
	@mail_exp_time bigint = -1,
	@mail_rewards nvarchar(2048) = '',

	@sp_rtn int = 0 output, 
	@sp_msg varchar(128) = '' output
)
as
	SET XACT_ABORT ON
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
	SET NOCOUNT ON

	BEGIN TRY

		declare @utc_date datetime2 = sysutcdatetime();
		declare @curr_time bigint = (datediff(s, '1970-01-01', @utc_date));

		--임시 주석
		--declare @b_exists bit = case when exists
		--(
		--	select 1 from dbo.tb_character_shop_iap_receipt where transaction_id = @transaction_id
		--) then 1 else 0 end;

		--if @b_exists = 1
		--begin
		--	select	@sp_rtn = -1, @sp_msg = 'already gave';
		--	return;
		--end;

		begin transaction

			--receipt 
			--임시 주석 테스트용
			--insert into dbo.tb_character_shop_iap_receipt(uid, store_type, transaction_id, product_id, mail_guid, dw_update_time)
			--values(@uid, @store_type, @transaction_id, @product_id, @mail_uid, @utc_date);

			--shop
			merge dbo.tb_character_shop as t_cs
			using ( select @uid as uid ) as s_crr
			on t_cs.uid = s_crr.uid and t_cs.shop_id = @record_id
			when matched then
				update set	[limit_count] = @bought_cnt,
							reset_time = @reset_time,
							dw_update_time = @utc_date
			when not matched by target then
				insert (uid, shop_id, limit_count, reset_time, dw_period_reward_time, dw_update_time)
				values (@uid, @record_id, @bought_cnt, @reset_time, @curr_time, @utc_date);

			--post
			insert into dbo.tb_character_post
			(	uid, id, type, title, msg, is_read, is_reward, 
			begin_time, expire_time, reward, dw_update_time)
			values
			(	@uid, @mail_uid, @mail_type, @mail_title, @mail_msg, 'FALSE', 'FALSE',
			@curr_time, @mail_exp_time, @mail_rewards, @utc_date)


			if @sp_rtn <> 0
			begin
				if XACT_STATE() <> 0 rollback transaction;
				return;
			end

		commit transaction;

		select	@sp_rtn = 0, 
				@sp_msg = 'success';
		return;
	END TRY
	BEGIN CATCH
		if XACT_STATE() <> 0 rollback transaction;
			select	@sp_rtn = ERROR_NUMBER(), @sp_msg = ERROR_MESSAGE();
			exec dbo.sp_sys_error_log_create;
		return;
	END CATCH
GO
EXEC sys.sp_addextendedproperty @name=N'Caption', @value=N'데이터베이스사용자이름 ' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'tb_sys_error_log', @level2type=N'COLUMN',@level2name=N'user_name'
GO
EXEC sys.sp_addextendedproperty @name=N'Caption', @value=N'TRY_CATCH오류의번호' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'tb_sys_error_log', @level2type=N'COLUMN',@level2name=N'error_no'
GO
EXEC sys.sp_addextendedproperty @name=N'Caption', @value=N'TRY_CATCH오류의심각도' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'tb_sys_error_log', @level2type=N'COLUMN',@level2name=N'error_serverity'
GO
EXEC sys.sp_addextendedproperty @name=N'Caption', @value=N'TRY_CATCH오류의상태번호' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'tb_sys_error_log', @level2type=N'COLUMN',@level2name=N'error_state'
GO
EXEC sys.sp_addextendedproperty @name=N'Caption', @value=N'TRY_CATCH오류의저장프로시저이름' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'tb_sys_error_log', @level2type=N'COLUMN',@level2name=N'error_proc'
GO
EXEC sys.sp_addextendedproperty @name=N'Caption', @value=N'TRY_CATCH오류의줄번호' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'tb_sys_error_log', @level2type=N'COLUMN',@level2name=N'error_line'
GO
EXEC sys.sp_addextendedproperty @name=N'Caption', @value=N'TRY_CATCH오류의메시지텍스트' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'tb_sys_error_log', @level2type=N'COLUMN',@level2name=N'error_msg'
GO
EXEC sys.sp_addextendedproperty @name=N'Caption', @value=N'오류발생시간' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'tb_sys_error_log', @level2type=N'COLUMN',@level2name=N'ipt_time'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'TRY..CATCH블록을실행시킨오류정보' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'tb_sys_error_log'
GO
