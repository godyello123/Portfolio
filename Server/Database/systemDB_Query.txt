USE [systemDB_individual]
GO
/****** Object:  Table [dbo].[tb_account]    Script Date: 2024-09-08 오전 12:12:42 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tb_account](
	[token_id] [nvarchar](128) NOT NULL,
	[uid] [bigint] NOT NULL,
	[auth_type] [tinyint] NOT NULL,
	[create_time] [datetime2](0) NOT NULL,
	[dw_update_time] [datetime2](0) NOT NULL,
 CONSTRAINT [pk_tb_account] PRIMARY KEY CLUSTERED 
(
	[token_id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tb_sys_error_log]    Script Date: 2024-09-08 오전 12:12:42 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tb_sys_error_log](
	[seq_no] [bigint] IDENTITY(1,1) NOT NULL,
	[user_name] [sysname] NOT NULL,
	[error_no] [int] NOT NULL,
	[error_serverity] [int] NULL,
	[error_state] [int] NULL,
	[error_proc] [nvarchar](126) NULL,
	[error_line] [int] NULL,
	[error_msg] [nvarchar](4000) NOT NULL,
	[ipt_time] [datetime] NULL,
	[dw_update_time] [datetime] NOT NULL,
 CONSTRAINT [PK_tb_sys_error_log] PRIMARY KEY CLUSTERED 
(
	[seq_no] DESC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tb_system_block_user]    Script Date: 2024-09-08 오전 12:12:42 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tb_system_block_user](
	[device_id] [nvarchar](128) NOT NULL,
	[cnt] [int] NOT NULL,
	[exp_time] [bigint] NOT NULL,
	[dw_update_time] [datetime2](0) NOT NULL,
 CONSTRAINT [pk_tb_sys_block_user] PRIMARY KEY CLUSTERED 
(
	[device_id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tb_system_notice]    Script Date: 2024-09-08 오전 12:12:42 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tb_system_notice](
	[notice_id] [bigint] IDENTITY(1,1) NOT NULL,
	[msg] [nvarchar](64) NOT NULL,
	[begin_time] [datetime2](0) NOT NULL,
	[expire_time] [datetime2](0) NOT NULL,
	[loop] [int] NOT NULL,
	[term] [int] NOT NULL,
	[dw_update_time] [datetime2](0) NOT NULL,
 CONSTRAINT [PK_tb_system_coupon] PRIMARY KEY CLUSTERED 
(
	[notice_id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tb_system_service_type]    Script Date: 2024-09-08 오전 12:12:42 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tb_system_service_type](
	[type] [bit] NOT NULL,
 CONSTRAINT [PK_tb_server_state] PRIMARY KEY CLUSTERED 
(
	[type] DESC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[tb_system_white_user]    Script Date: 2024-09-08 오전 12:12:42 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[tb_system_white_user](
	[device_id] [nvarchar](128) NOT NULL,
	[create_time] [datetime2](0) NOT NULL,
	[dw_update_time] [datetime2](0) NOT NULL,
 CONSTRAINT [pk_tb_sys_white_user] PRIMARY KEY CLUSTERED 
(
	[device_id] ASC
)WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON, OPTIMIZE_FOR_SEQUENTIAL_KEY = OFF) ON [PRIMARY]
) ON [PRIMARY]
GO
ALTER TABLE [dbo].[tb_sys_error_log] ADD  CONSTRAINT [df_tb_sys_error_log_dw_update_time]  DEFAULT (getdate()) FOR [dw_update_time]
GO
/****** Object:  StoredProcedure [dbo].[sp_account_auth]    Script Date: 2024-09-08 오전 12:12:42 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE procedure [dbo].[sp_account_auth]
(
	@serverId int = 0,
	@token nvarchar(128),
	@auth_type tinyint,
	@sp_rtn int = 0 output, 
	@sp_msg varchar(128) = '' output
)
as
	SET XACT_ABORT ON
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
	SET NOCOUNT ON

	BEGIN TRY
		declare @utc_date datetime2 = sysutcdatetime();
		declare @tmp_output table (uid bigint);

		begin transaction

			update dbo.tb_account
			set auth_type = @auth_type, dw_update_time = @utc_date
			output inserted.uid into @tmp_output
			where token_id = @token

			if @@ROWCOUNT = 0
			begin
				declare @new_uid bigint = (next value for dbo.seq_pc_id);

				insert into dbo.tb_account( token_id, uid, auth_type, create_time, dw_update_time )
				output inserted.uid into @tmp_output
				values( @token, @new_uid, @auth_type, @utc_date, @utc_date );
			end

			select top(1)uid
			from @tmp_output;

		commit transaction

		select	@sp_rtn = 0, 
				@sp_msg = 'success';
		return;
	END TRY
	BEGIN CATCH
		if XACT_STATE() <> 0 rollback transaction;
		select	@sp_rtn = ERROR_NUMBER(), @sp_msg = ERROR_MESSAGE();
		exec dbo.sp_sys_error_log_create;
		return;
	END CATCH
GO
/****** Object:  StoredProcedure [dbo].[sp_sys_error_log_create]    Script Date: 2024-09-08 오전 12:12:42 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



create procedure [dbo].[sp_sys_error_log_create]
as
	set nocount on;
	set xact_abort on;

	begin
		begin try
			if error_number() is null
				return;

			if xact_state() = -1
			begin 
				print 'Cannot log error since the current transaction is in an uncommittable state. ' 
		            + 'Rollback the transaction before executing P_ERROR_LOG_C in order to successfully log error information.';
		        return;
			end

			insert dbo.tb_sys_error_log 
			(
				user_name, error_no, error_serverity, error_state, error_proc,
				error_line, error_msg, ipt_time
			)
			values
			(
				convert(sysname, suser_sname()), error_number(), error_severity(), error_state(), error_procedure(),
		        error_line(), error_message(), getdate()
			);

		end try
		begin catch
			EXEC dbo.sp_sys_error_log_create;
		end catch
	end;

GO
/****** Object:  StoredProcedure [dbo].[sp_system_delete_block_user]    Script Date: 2024-09-08 오전 12:12:42 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE procedure [dbo].[sp_system_delete_block_user]
(
	@device_id varchar(128) = 0,
	@sp_rtn int = 0 output, 
	@sp_msg varchar(128) = '' output
)
as
	SET XACT_ABORT ON
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
	SET NOCOUNT ON

	BEGIN TRY
	declare @utc_date datetime2 = sysutcdatetime();
	declare @utc_time bigint = DATEDIFF(SECOND,{d '1970-01-01'}, @utc_date)

		begin transaction

			update dbo.tb_system_block_user
			set exp_time = @utc_time
			where device_id = @device_id

			select device_id, cnt, exp_time
			from dbo.tb_system_block_user
			where device_id = @device_id


		commit transaction

		select	@sp_rtn = 0, 
				@sp_msg = 'success';
		return;
	END TRY
	BEGIN CATCH
		if XACT_STATE() <> 0 rollback transaction;
		select	@sp_rtn = ERROR_NUMBER(), @sp_msg = ERROR_MESSAGE();
		exec dbo.sp_sys_error_log_create;
		return;
	END CATCH
GO
/****** Object:  StoredProcedure [dbo].[sp_system_delete_white_user]    Script Date: 2024-09-08 오전 12:12:42 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE procedure [dbo].[sp_system_delete_white_user]
(
	@device_id varchar(128) = 0,
	@sp_rtn int = 0 output, 
	@sp_msg varchar(128) = '' output
)
as
	SET XACT_ABORT ON
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
	SET NOCOUNT ON

	BEGIN TRY
	declare @utc_date datetime2 = sysutcdatetime();
	declare @utc_time bigint = DATEDIFF(SECOND,{d '1970-01-01'}, @utc_date)

		begin transaction

			delete from dbo.tb_system_white_user
			where device_id = @device_id
			
		commit transaction

		select	@sp_rtn = 0, 
				@sp_msg = 'success';
		return;
	END TRY
	BEGIN CATCH
		if XACT_STATE() <> 0 rollback transaction;
		select	@sp_rtn = ERROR_NUMBER(), @sp_msg = ERROR_MESSAGE();
		exec dbo.sp_sys_error_log_create;
		return;
	END CATCH
GO
/****** Object:  StoredProcedure [dbo].[sp_system_load]    Script Date: 2024-09-08 오전 12:12:42 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE procedure [dbo].[sp_system_load]
(
	@uid int = 0,
	@sp_rtn int = 0 output, 
	@sp_msg varchar(128) = '' output
)
as
	SET XACT_ABORT ON
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
	SET NOCOUNT ON

	BEGIN TRY
		declare @utc_date datetime2 = sysutcdatetime();
		declare @utc_time bigint = DATEDIFF(SECOND,{d '1970-01-01'}, @utc_date)

		--block user
		select device_id, cnt, exp_time
		from dbo.tb_system_block_user
		where @utc_time < exp_time 

		--white user
		select device_id, create_time
		from dbo.tb_system_white_user
		
		--notice
		select notice_id, msg, begin_time, expire_time, loop, term
		from dbo.tb_system_notice
		
		--servicetype
		select top(1)type
		from dbo.tb_system_service_type

		select	@sp_rtn = 0, 
				@sp_msg = 'success';
		return;
	END TRY
	BEGIN CATCH
		if XACT_STATE() <> 0 rollback transaction;
		select	@sp_rtn = ERROR_NUMBER(), @sp_msg = ERROR_MESSAGE();
		exec dbo.sp_sys_error_log_create;
		return;
	END CATCH
GO
/****** Object:  StoredProcedure [dbo].[sp_system_service_type_update]    Script Date: 2024-09-08 오전 12:12:42 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE procedure [dbo].[sp_system_service_type_update]
(
	@serviceopen bit = 0,

	@sp_rtn int = 0 output, 
	@sp_msg varchar(128) = '' output
)
as
	SET XACT_ABORT ON
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
	SET NOCOUNT ON

	BEGIN TRY
		declare @utc_date datetime2 = sysutcdatetime();
		declare @utc_time bigint = DATEDIFF(SECOND,{d '1970-01-01'}, @utc_date)

		update dbo.tb_system_service_type
		set type = @serviceopen

		select	@sp_rtn = 0, 
				@sp_msg = 'success';
		return;
	END TRY
	BEGIN CATCH
		if XACT_STATE() <> 0 rollback transaction;
		select	@sp_rtn = ERROR_NUMBER(), @sp_msg = ERROR_MESSAGE();
		exec dbo.sp_sys_error_log_create;
		return;
	END CATCH
GO
/****** Object:  StoredProcedure [dbo].[sp_system_update_block_user]    Script Date: 2024-09-08 오전 12:12:42 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE procedure [dbo].[sp_system_update_block_user]
(
	@device_id varchar(128) = 0,
	@cnt int = 0,
	@block_exp_time bigint = 0,
	@sp_rtn int = 0 output, 
	@sp_msg varchar(128) = '' output
)
as
	SET XACT_ABORT ON
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
	SET NOCOUNT ON

	BEGIN TRY
		declare @utc_date datetime2 = sysutcdatetime();

		begin transaction

			merge dbo.tb_system_block_user as t_sbu
				using ( select @device_id as device_id ) as s_sbu
				on t_sbu.device_id = s_sbu.device_id
				when matched then
				update set cnt += 1,
						exp_time = @block_exp_time
				when not matched by target then
					insert (device_id, cnt, exp_time ,dw_update_time)
					values (@device_id, @cnt, @block_exp_time, @utc_date);
		

		commit transaction

		select	@sp_rtn = 0, 
				@sp_msg = 'success';
		return;
	END TRY
	BEGIN CATCH
		if XACT_STATE() <> 0 rollback transaction;
		select	@sp_rtn = ERROR_NUMBER(), @sp_msg = ERROR_MESSAGE();
		exec dbo.sp_sys_error_log_create;
		return;
	END CATCH
GO
/****** Object:  StoredProcedure [dbo].[sp_system_update_white_user]    Script Date: 2024-09-08 오전 12:12:42 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE procedure [dbo].[sp_system_update_white_user]
(
	@device_id varchar(128) = 0,
	@sp_rtn int = 0 output, 
	@sp_msg varchar(128) = '' output
)
as
	SET XACT_ABORT ON
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
	SET NOCOUNT ON

	BEGIN TRY
		declare @utc_date datetime2 = sysutcdatetime();

		begin transaction

			merge dbo.tb_system_white_user as t_swu
				using ( select @device_id as device_id ) as s_swu
				on t_swu.device_id = s_swu.device_id
				when not matched by target then
					insert (device_id, create_time, dw_update_time)
					values (@device_id, @utc_date, @utc_date);

			select device_id, create_time
			from dbo.tb_system_white_user
			where device_id = @device_id
		

		commit transaction

		select	@sp_rtn = 0, 
				@sp_msg = 'success';
		return;
	END TRY
	BEGIN CATCH
		if XACT_STATE() <> 0 rollback transaction;
		select	@sp_rtn = ERROR_NUMBER(), @sp_msg = ERROR_MESSAGE();
		exec dbo.sp_sys_error_log_create;
		return;
	END CATCH
GO
/****** Object:  StoredProcedure [dbo].[sp_tool_block_user_load]    Script Date: 2024-09-08 오전 12:12:42 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE procedure [dbo].[sp_tool_block_user_load]
(
	@uid int = 0,
	@sp_rtn int = 0 output, 
	@sp_msg varchar(128) = '' output
)
as
	SET XACT_ABORT ON
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
	SET NOCOUNT ON

	BEGIN TRY
		declare @utc_date datetime2 = sysutcdatetime();
		declare @utc_time bigint = DATEDIFF(SECOND,{d '1970-01-01'}, @utc_date)

		--block user
		select device_id, cnt, exp_time
		from dbo.tb_system_block_user
		
		select	@sp_rtn = 0, 
				@sp_msg = 'success';
		return;
	END TRY
	BEGIN CATCH
		if XACT_STATE() <> 0 rollback transaction;
		select	@sp_rtn = ERROR_NUMBER(), @sp_msg = ERROR_MESSAGE();
		exec dbo.sp_sys_error_log_create;
		return;
	END CATCH
GO
/****** Object:  StoredProcedure [dbo].[sp_tool_system_block_user_upsert]    Script Date: 2024-09-08 오전 12:12:42 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE procedure [dbo].[sp_tool_system_block_user_upsert]
(
	@block_str_json varchar(max) ='',

	@sp_rtn int = 0 output, 
	@sp_msg varchar(128) = '' output
)
as
	SET XACT_ABORT ON
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
	SET NOCOUNT ON

	BEGIN TRY
		declare @utc_date datetime2 = sysutcdatetime();

		begin transaction
			merge dbo.tb_system_block_user as t_sbu
				using 
				(
				select DeviceID, Count, ExpTime
				from openjson(@block_str_json) with
					(
						DeviceID nvarchar(128), Count int, ExpTime bigint
					)
				) as s_sbu(DeviceID, Count, ExpTime)
				on t_sbu.device_id = s_sbu.DeviceID
				when matched then
				update set cnt += 1,
						exp_time = s_sbu.ExpTime
				when not matched by target then
					insert (device_id, cnt, exp_time ,dw_update_time)
					values (s_sbu.DeviceID, 1, s_sbu.ExpTime, @utc_date);
		
		commit transaction

		select	@sp_rtn = 0, 
				@sp_msg = 'success';
		return;
	END TRY
	BEGIN CATCH
		if XACT_STATE() <> 0 rollback transaction;
		select	@sp_rtn = ERROR_NUMBER(), @sp_msg = ERROR_MESSAGE();
		exec dbo.sp_sys_error_log_create;
		return;
	END CATCH
GO
/****** Object:  StoredProcedure [dbo].[sp_tool_system_notice_load]    Script Date: 2024-09-08 오전 12:12:42 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



create procedure [dbo].[sp_tool_system_notice_load]
(
	@start Datetime2(0) = '',
	@end DateTime2(0) ='',

	@sp_rtn int = 0 output, 
	@sp_msg varchar(128) = '' output
)
as
	SET XACT_ABORT ON
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
	SET NOCOUNT ON

	BEGIN TRY
		declare @utc_date datetime2 = sysutcdatetime();
		declare @utc_time bigint = DATEDIFF(SECOND,{d '1970-01-01'}, @utc_date)

		--notice
		select notice_id, msg, begin_time, expire_time, loop, term
		from dbo.tb_system_notice
		where begin_time between @start and @end
		
		select	@sp_rtn = 0, 
				@sp_msg = 'success';
		return;
	END TRY
	BEGIN CATCH
		if XACT_STATE() <> 0 rollback transaction;
		select	@sp_rtn = ERROR_NUMBER(), @sp_msg = ERROR_MESSAGE();
		exec dbo.sp_sys_error_log_create;
		return;
	END CATCH
GO
/****** Object:  StoredProcedure [dbo].[sp_tool_system_notice_remove]    Script Date: 2024-09-08 오전 12:12:42 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE procedure [dbo].[sp_tool_system_notice_remove]
(
	@notice_id bigint = 0,
	
	@sp_rtn int = 0 output, 
	@sp_msg varchar(128) = '' output
)
as
	SET XACT_ABORT ON
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
	SET NOCOUNT ON

	BEGIN TRY
		declare @utc_date datetime2 = sysutcdatetime();
		declare @utc_time bigint = DATEDIFF(SECOND,{d '1970-01-01'}, @utc_date)
		DECLARE @InsertedId INT;

		begin transaction

		delete from dbo.tb_system_notice
		where notice_id = @notice_id

		select	@sp_rtn = 0, 
				@sp_msg = 'success';

		commit transaction
		return;
	END TRY
	BEGIN CATCH
		if XACT_STATE() <> 0 rollback transaction;
		select	@sp_rtn = ERROR_NUMBER(), @sp_msg = ERROR_MESSAGE();
		exec dbo.sp_sys_error_log_create;
		return;
	END CATCH
GO
/****** Object:  StoredProcedure [dbo].[sp_tool_system_notice_upsert]    Script Date: 2024-09-08 오전 12:12:42 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO



CREATE procedure [dbo].[sp_tool_system_notice_upsert]
(
	@notice_id bigint = 0,
	@notice_msg nvarchar(max) = '',
	@notice_start datetime2(0) = '',
	@notice_end datetime2(0) = '',
	@notice_loop int = 0,
	@notice_term int = 0,

	@sp_rtn int = 0 output, 
	@sp_msg varchar(128) = '' output
)
as
	SET XACT_ABORT ON
	SET TRANSACTION ISOLATION LEVEL READ UNCOMMITTED
	SET NOCOUNT ON

	BEGIN TRY
		declare @utc_date datetime2 = sysutcdatetime();
		declare @utc_time bigint = DATEDIFF(SECOND,{d '1970-01-01'}, @utc_date)
		DECLARE @InsertedId INT;

		begin transaction

		update dbo.tb_system_notice
		set msg = @notice_msg, begin_time = @notice_start, expire_time = @notice_end,
		loop = @notice_loop, term = @notice_term, dw_update_time = @utc_date
		where notice_id = @notice_id

		if @@ROWCOUNT = 0
		begin
			INSERT INTO [dbo].[tb_system_notice]
			   ([msg]
			   ,[begin_time]
			   ,[expire_time]
			   ,[loop]
			   ,[term]
			   ,[dw_update_time])
			VALUES
			   (@notice_msg,
				@notice_start,
				@notice_end,
				@notice_loop,
				@notice_term,
				@utc_date)

			SET @notice_id = SCOPE_IDENTITY();
		end
		
		select notice_id, msg, begin_time, expire_time, loop, term
		from dbo.tb_system_notice
		where notice_id = @notice_id

		select	@sp_rtn = 0, 
				@sp_msg = 'success';

		commit transaction
		return;
	END TRY
	BEGIN CATCH
		if XACT_STATE() <> 0 rollback transaction;
		select	@sp_rtn = ERROR_NUMBER(), @sp_msg = ERROR_MESSAGE();
		exec dbo.sp_sys_error_log_create;
		return;
	END CATCH
GO
EXEC sys.sp_addextendedproperty @name=N'Caption', @value=N'데이터베이스사용자이름 ' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'tb_sys_error_log', @level2type=N'COLUMN',@level2name=N'user_name'
GO
EXEC sys.sp_addextendedproperty @name=N'Caption', @value=N'TRY_CATCH오류의번호' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'tb_sys_error_log', @level2type=N'COLUMN',@level2name=N'error_no'
GO
EXEC sys.sp_addextendedproperty @name=N'Caption', @value=N'TRY_CATCH오류의심각도' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'tb_sys_error_log', @level2type=N'COLUMN',@level2name=N'error_serverity'
GO
EXEC sys.sp_addextendedproperty @name=N'Caption', @value=N'TRY_CATCH오류의상태번호' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'tb_sys_error_log', @level2type=N'COLUMN',@level2name=N'error_state'
GO
EXEC sys.sp_addextendedproperty @name=N'Caption', @value=N'TRY_CATCH오류의저장프로시저이름' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'tb_sys_error_log', @level2type=N'COLUMN',@level2name=N'error_proc'
GO
EXEC sys.sp_addextendedproperty @name=N'Caption', @value=N'TRY_CATCH오류의줄번호' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'tb_sys_error_log', @level2type=N'COLUMN',@level2name=N'error_line'
GO
EXEC sys.sp_addextendedproperty @name=N'Caption', @value=N'TRY_CATCH오류의메시지텍스트' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'tb_sys_error_log', @level2type=N'COLUMN',@level2name=N'error_msg'
GO
EXEC sys.sp_addextendedproperty @name=N'Caption', @value=N'오류발생시간' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'tb_sys_error_log', @level2type=N'COLUMN',@level2name=N'ipt_time'
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'TRY..CATCH블록을실행시킨오류정보' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'tb_sys_error_log'
GO
